<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sunflower-&gt;FE</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://chriscindy.top/"/>
  <updated>2017-04-13T09:59:15.000Z</updated>
  <id>http://chriscindy.top/</id>
  
  <author>
    <name>ChrisCindy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>如何终止 JS 脚本的运行</title>
    <link href="http://chriscindy.top/2017/04/13/%E5%A6%82%E4%BD%95%E7%BB%88%E6%AD%A2-JS-%E8%84%9A%E6%9C%AC%E7%9A%84%E8%BF%90%E8%A1%8C/"/>
    <id>http://chriscindy.top/2017/04/13/如何终止-JS-脚本的运行/</id>
    <published>2017-04-13T02:20:22.000Z</published>
    <updated>2017-04-13T09:59:15.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在开发一个 JSSDK 的时候有一个需求：为了检测当前环境中是否已经加载过该脚本，需要在脚本开始运行时加入一层判断，如果检测到已存在该脚本导出的变量，则终止脚本的后续运行，否则再执行后续逻辑。 那么便碰上了本文标题的问题：如何终止 JS 脚本的运行？&lt;/p&gt;
&lt;p&gt;在很多其他语言比如 PHP 当中，存在 exit 函数来中止程序的运行。很遗憾的是 JavaScript 没有。因此我们需要自己模拟出这么一个 “exit” 功能。&lt;/p&gt;
&lt;p&gt;我们知道，&lt;code&gt;break&lt;/code&gt;是 JavaScript 中合法的中断语句，但其只适用于循环和 switch 语句，此路不通。除了 &lt;code&gt;break&lt;/code&gt;，JavaScript 还可以通过 &lt;code&gt;return&lt;/code&gt; 来显示终止一个函数的执行，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;executed&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;not executed&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;return&lt;/code&gt; 语句之后的代码将不会被执行。看起来可以用这个方式来达到我们终止 JS 脚本运行的目的。&lt;/p&gt;
&lt;p&gt;那么我们来试试看在脚本中使用 &lt;code&gt;return&lt;/code&gt;：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// index.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;OK,let&#39;s start&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;first step&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;second step&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;you cannot see me&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;我们把脚本丢到浏览器里去执行一下，发现报错了，信息如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Uncaught SyntaxError: Illegal return statement&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里我们犯了一个严重的错误：&lt;code&gt;return&lt;/code&gt; 只能应用于函数内部，而脚本本身并不是函数。这里大家可能很自然的想到，把脚本包裹在一个自执行匿名函数（IIFE）里不就行了。我们尝试一下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// index.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;;(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;OK,let&#39;s start&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;first step&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;second step&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;you cannot see me&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;浏览器的执行结果如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;OK,let&amp;apos;s start&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;first step&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;second step&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;OK，我们的目标达成，成功终止了脚本的运行。确实，将代码包裹在 IIFE 中可以随时控制脚本运行是否终止，但是这是否有点麻烦呢？固然我们有 Rollup 一类的工具可以将代码打包成为 IIFE 形式，但毕竟多一步操作，还需要对构建工具进行配置，在小项目里成本过高。而且，并不是所有需要中断程序运行的场景下都适合将代码通过 IIFE 来执行。因此，这一方式可行，但不够简洁。&lt;/p&gt;
&lt;p&gt;实际可行的方法是利用错误来终止 JavaScript 程序的运行。这里的错误包括语法错误、变量错误、程序错误等等，我们只需要用 &lt;code&gt;throw new Error()&lt;/code&gt; 的方式抛出错误，就能达到目的。在抛出该错误之前的代码可正常执行不受影响，而在其之后的代码则不会执行。看下例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// index.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;OK,let&#39;s start&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;first step&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;second step&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;this is my customed error&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;you cannot see me&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79ly1fel7101qkuj30jw05kt9a.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;OK，目标达成。你可以在你的程序中任意想中止的地方抛出错误，然后就能达到 exit 的目的。&lt;/p&gt;
&lt;p&gt;但是，进一步思考，为什么 JavaScript 没有提供类似其他语言的 exit 函数呢？实际上，这一切都是因为 JavaScript 是单线程语言，基于代码可以异步执行的考虑，才没有设置 exit 功能。那么，是不是在包含异步执行的代码中，我们的抛出错误的方法实际上也不能立刻终止程序呢？答案是肯定的，我们看下例子：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// index.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;OK,let&#39;s start&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;first step&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;second step&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(() =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;you still can see me&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;, &lt;span class=&quot;number&quot;&gt;1000&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Error&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;this is my customed error&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;you cannot see me&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;执行结果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79ly1fel7914um4j30je06swf8.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;“you still can see me” 延迟了一秒输出，但是仍然输出了，说明我们的 &lt;code&gt;throw new Error&lt;/code&gt; 并没有立刻中止异步代码的执行。实际上这也是必然的，感兴趣的同学可以去研究一下 JavaScript 的运行机制以及 Event Loop 相关的内容。&lt;/p&gt;
&lt;p&gt;最后，我们得出结论，JavaScript 的主线程同步任务可以通过抛出错误的方式立即中止，但是异步任务并不会受到影响。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在开发一个 JSSDK 的时候有一个需求：为了检测当前环境中是否已经加载过该脚本，需要在脚本开始运行时加入一层判断，如果检测到已存在该脚本导出的变量，则终止脚本的后续运行，否则再执行后续逻辑。 那么便碰上了本文标题的问题：如何终止 JS 脚本的运行？&lt;/p&gt;
&lt;p&gt;在很
    
    </summary>
    
      <category term="解决方案" scheme="http://chriscindy.top/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="JavaScript" scheme="http://chriscindy.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>Vue 插件开发入门</title>
    <link href="http://chriscindy.top/2017/04/01/Vuex-%E6%8F%92%E4%BB%B6%E5%BC%80%E5%8F%91%E5%85%A5%E9%97%A8/"/>
    <id>http://chriscindy.top/2017/04/01/Vuex-插件开发入门/</id>
    <published>2017-04-01T07:47:42.000Z</published>
    <updated>2017-04-01T07:48:09.000Z</updated>
    
    <content type="html">&lt;p&gt;相对&lt;strong&gt;组件&lt;/strong&gt;来说，Vue 的&lt;strong&gt;插件&lt;/strong&gt;开发受到的关注要&lt;strong&gt;少&lt;/strong&gt;一点。但是插件的功能是十分强大的，能够完成许多 Vue 框架本身不具备的功能。&lt;/p&gt;
&lt;p&gt;大家一般习惯直接调用现成的插件，比如官方推荐的 &lt;strong&gt;vue-router&lt;/strong&gt;、&lt;strong&gt;vue-touch&lt;/strong&gt; 等。&lt;br&gt;下面就看一下 Vue 的插件开发如何入门。&lt;/p&gt;
&lt;p&gt;首先我们简单回顾一下 Vue.js 官方文档中对于插件开发的描述。&lt;/p&gt;
&lt;p&gt;Vue 的插件必须提供一个公开方法 &lt;strong&gt;install&lt;/strong&gt;，该方法会在你使用该插件，也就是 &lt;code&gt;Vue.use(yourPlugin)&lt;/code&gt; 时被调用，相当于是一个插件的注册或者声明。&lt;code&gt;install&lt;/code&gt; 接受 Vue 构造器作为第一个参数，并且有一个可选的选项对象作为第二个参数，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;yourPlugin.install = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;Vue, options&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 1. 添加全局方法或属性&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Vue.myGlobalMethod = ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 2. 添加全局资源&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Vue.directive(&lt;span class=&quot;string&quot;&gt;&#39;my-directive&#39;&lt;/span&gt;, &amp;#123;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 3. 添加实例方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Vue.prototype.$myMethod = ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;插件在使用时有&lt;strong&gt;两种&lt;/strong&gt;方式：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;第一种是如上述提到的，可以通过 &lt;code&gt;Vue.use(yourPlugin)&lt;/code&gt; 全局方法进行调用。&lt;br&gt;进行 Vue 的大型项目开发时，如果用 vue-cli 生成项目目录结构，&lt;code&gt;Vue.use()&lt;/code&gt; 方法一般在 main.js 中调用。&lt;/p&gt;
&lt;p&gt;第二种实际上是插件本身帮你完成了 &lt;code&gt;Vue.use()&lt;/code&gt;的调用。&lt;br&gt;这种情况下，插件会去检测是否存在 &lt;code&gt;Vue&lt;/code&gt; 全局变量，如果存在，就自动调用 &lt;code&gt;Vue.use()&lt;/code&gt;。所以，如果你的项目中是使用 script 方式引入的 Vue.js（这种情况下 &lt;code&gt;Vue&lt;/code&gt; 才会作为一个全局变量存在），在使用比如 vue-router 之类的插件时就可以直接引入然后使用，不用再调用 &lt;code&gt;Vue.use()&lt;/code&gt;。&lt;br&gt;但是，在模块环境下应当始终显式调用该方法，以保证插件可以正常使用：&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 通过 Browserify 或 Webpack 使用 CommonJS 兼容模块&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Vue = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;vue&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; VueRouter = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;vue-router&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 不要忘了调用此方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vue.use(VueRouter)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 或者可以多传入一个选项对象&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Vue.use(VueRouter, &amp;#123; hashbang: true &amp;#125;)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;接下来我们看一下一些官方的常用&lt;strong&gt;插件&lt;/strong&gt;的实现，我们配合去除具体逻辑的源码进行一些解读：&lt;/p&gt;
&lt;p&gt;1、&lt;strong&gt;vue-touch&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// version: 1.1.0&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// vue-touch.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; vueTouch = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 暴露出的全局配置项，也就是在调用 Vue.use(Vue, options) 时传入的第二个选项参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vueTouch.config = &amp;#123;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 核心部分，插件的具体逻辑均在此实现&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;vueTouch.install = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;Vue&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Vue.directive(&lt;span class=&quot;string&quot;&gt;&#39;touch&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    bind: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    update: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    unbind: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 支持 CommonJS&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; exports == &lt;span class=&quot;string&quot;&gt;&quot;object&quot;&lt;/span&gt;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = vueTouch&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 支持 AMD&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; define == &lt;span class=&quot;string&quot;&gt;&quot;function&quot;&lt;/span&gt; &amp;amp;&amp;amp; define.amd) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  define([], &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; vueTouch &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Vue 是全局变量时，自动调用 Vue.use()&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;else&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.Vue) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.VueTouch = vueTouch&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Vue.use(vueTouch)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;2、&lt;strong&gt;vue-router&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// version: 0.7.13&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// src/index.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; Vue&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 封装为 ES6 class&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Router&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 可传入全局配置项&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    hashbang = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    abstract = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    history = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    saveScrollPosition = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    transitionOnLoad = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    suppressTransitionError = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    root = &lt;span class=&quot;literal&quot;&gt;null&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    linkActiveClass = &lt;span class=&quot;string&quot;&gt;&#39;v-link-active&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125; = &amp;#123;&amp;#125;) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 避免重复 install，设立 flag&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Router.installed = &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Router.install = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;externalVue&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (Route.installed) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Vue = externalVue&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// install 的具体逻辑，此处省略&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// install 完毕&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Router.installed = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 同样，Vue 作为全局变量时自动 install&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt; !== &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.Vue) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.Vue.use(Router)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; Router&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;3、 &lt;strong&gt;vue-resource&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// version: 1.0.3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// src/index.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// install 方法&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;plugin&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;Vue&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (plugin.installed) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 插件核心逻辑，此处省略&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// ...&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 同上，Vue 是全局变量时，自动 install&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;typeof&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt; !== &lt;span class=&quot;string&quot;&gt;&#39;undefined&#39;&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.Vue) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;.Vue.use(plugin);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; plugin;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;看完以上三个官方例子，相信各位已经对 Vue 的插件开发过程有了一定的了解，大家就可以根据自己的需要为 Vue 增加各种全局功能了。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;相对&lt;strong&gt;组件&lt;/strong&gt;来说，Vue 的&lt;strong&gt;插件&lt;/strong&gt;开发受到的关注要&lt;strong&gt;少&lt;/strong&gt;一点。但是插件的功能是十分强大的，能够完成许多 Vue 框架本身不具备的功能。&lt;/p&gt;
&lt;p&gt;大家一般习惯直接调用现成的插件，
    
    </summary>
    
      <category term="技术使用" scheme="http://chriscindy.top/categories/%E6%8A%80%E6%9C%AF%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Vue.js" scheme="http://chriscindy.top/tags/Vue-js/"/>
    
  </entry>
  
  <entry>
    <title>HTTP 协议如何实现文件下载功能</title>
    <link href="http://chriscindy.top/2017/03/03/HTTP-%E5%8D%8F%E8%AE%AE%E5%A6%82%E4%BD%95%E5%AE%9E%E7%8E%B0%E6%96%87%E4%BB%B6%E4%B8%8B%E8%BD%BD%E5%8A%9F%E8%83%BD/"/>
    <id>http://chriscindy.top/2017/03/03/HTTP-协议如何实现文件下载功能/</id>
    <published>2017-03-03T07:35:58.000Z</published>
    <updated>2017-03-03T07:37:11.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在做的一个项目需要自己搭建 node 服务端作中间层来转发请求与响应，原本倒也无甚难度，但是在中转一个返回内容是 excel 文件时遇到了一些问题。当然后来这个问题解决了，node 层对后端返回的响应不作处理，直接利用 pipe 穿透到前端即可（当然，用 node 改造一下再转发也是可以的，只是不如直接穿透方便）。今天想谈谈的是 http 响应头在返回数据是一个需要下载的文件时，应该是什么样子的。&lt;/p&gt;
&lt;p&gt;http 协议实现文件下载时，需要在服务器设置好相关响应头，并使用二进制传输文件数据，而客户端（浏览器）会根据响应头接收文件数据。在 http 响应报文中，&lt;code&gt;Content-type&lt;/code&gt; 和 &lt;code&gt;Content-Disposition&lt;/code&gt; 是最关键的两个响应头。我们知道，通常情况下，前后端进行 ajax 交互时，后端返回前端的数据格式为 json（或者 xml）。这个时候响应报文里 &lt;code&gt;Content-type&lt;/code&gt; 一般是 &lt;code&gt;text/html&lt;/code&gt;、&lt;code&gt;text/plain&lt;/code&gt; 或者 &lt;code&gt;application/json&lt;/code&gt;，并且不会出现 &lt;code&gt;Content-Disposition&lt;/code&gt; 头。但在下载文件时，&lt;code&gt;Content-type&lt;/code&gt; 需要设置为 &lt;code&gt;application/octet-stream&lt;/code&gt;，该 MIME 类型在 RFC 1341 中定义，表示响应实体部分是未分类的二进制数据；&lt;code&gt;Content-Disposition&lt;/code&gt; 则需要设置为 &lt;code&gt;attachment; filename=yourFileName.yourFileExtension&lt;/code&gt;。客户端（浏览器）在接收到这个响应之后，&lt;code&gt;Content-Type: application/octet-stream&lt;/code&gt; 告诉客户端这是一个二进制文件，&lt;code&gt;Content-Disposition&lt;/code&gt; 告诉客户端这是一个需要下载的附件并告诉浏览器该附件默认的文件名。如果不添加 &lt;code&gt;Content-Disposition&lt;/code&gt; 响应头，浏览器可能会下载或显示文件内容，不同浏览器的处理有所不同。&lt;/p&gt;
&lt;p&gt;在设置 &lt;code&gt;Content-type&lt;/code&gt; 时，除了设置 &lt;code&gt;application/octet-stream&lt;/code&gt;，也可以设置更为具体的文件类型，比如如果下载文件为微软的 word 文件，&lt;code&gt;Content-type&lt;/code&gt; 就可以设置为 &lt;code&gt;application/msword&lt;/code&gt;。一般来说 web 服务器比如 Nginx 会自动根据传输的文件类型来选择相应的 &lt;code&gt;Content-type&lt;/code&gt;（需要先配置好映射关系）。当然，在 Web 程序中也可以手动设置。比如在 node 中就可以使用 mime 包来完成这个工作。&lt;/p&gt;
&lt;p&gt;以上就是基本的 http 协议实现文件下载功能的方式。如果还要进一步实现断点续传等功能，需要设置 &lt;code&gt;Content-range&lt;/code&gt;，这里就不展开了。&lt;/p&gt;
&lt;p&gt;参考文献：《HTTP权威指南》、《图解HTTP》&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在做的一个项目需要自己搭建 node 服务端作中间层来转发请求与响应，原本倒也无甚难度，但是在中转一个返回内容是 excel 文件时遇到了一些问题。当然后来这个问题解决了，node 层对后端返回的响应不作处理，直接利用 pipe 穿透到前端即可（当然，用 node 改造
    
    </summary>
    
      <category term="理论学习" scheme="http://chriscindy.top/categories/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="HTTP" scheme="http://chriscindy.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>Vuex 实战</title>
    <link href="http://chriscindy.top/2017/03/03/Vuex-%E5%AE%9E%E6%88%98/"/>
    <id>http://chriscindy.top/2017/03/03/Vuex-实战/</id>
    <published>2017-03-03T07:31:39.000Z</published>
    <updated>2017-03-03T07:34:23.000Z</updated>
    
    <content type="html">&lt;p&gt;Vuex 作为中大型 Vue 应用中的“御用”集中数据管理工具，在实习时的公司很早就得到了广泛使用。本文旨在以尽可能简洁的文字向读者展示：如何在一个颇具规模的 Vue 应用中&lt;strong&gt;组织和管理 Vuex 的代码&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;注：虽然目前 Vuex 的最新版本已经来到 &lt;strong&gt;2.x&lt;/strong&gt;。2.x 在1.0 的基础上进行了一些优化，提升了命名的语义化以及 增强了模块的可移植性和可组合性，但基本思想和架构并没有改变。&lt;/p&gt;
&lt;p&gt;本文基于 Vuex &lt;strong&gt;1.0&lt;/strong&gt; 版本，读者大可不必担心出现类似 Angular 1.x  升级到 2.x 式的断崖式更新。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;首先，介绍一下项目的背景：&lt;br&gt;一个采用 Vue.js 编写的富交互的 H5 编辑器，由于各个组件中的数据交互繁多，页面的生成也极度依赖存储的状态，使用 Vuex 进行管理便势在必行。&lt;br&gt;项目引入 Vuex 的方式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; App &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;components/home/App&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; store &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;vuex/editor/store&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 在 Vue 实例的初始化中声明 store。&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vue(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  el: &lt;span class=&quot;string&quot;&gt;&#39;body&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  components: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    App&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  store&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在根实例中注册 store 选项，这样该 store 实例会注入到根组件下的所有子组件中，方便后面我们在每个子组件中调用 store 中 state 里存储的数据。&lt;/p&gt;
&lt;p&gt;然后看一下 &lt;strong&gt;vuex&lt;/strong&gt; 文件夹下的目录，后面我们会逐个分析每个文件的作用：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;└── editor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── mutation-types.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── actions&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    │   └── index.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── mutations&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    │   └── index.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── plugins&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    │   └── index.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ├── state&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    │   └── index.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    └── store&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        └── index.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;创建 store 对象的代码放在 vuex/editor/store/index.js 中，如下所示：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// vuex/editor/store/index.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; Vuex &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;vuex&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; state &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;vuex/editor/state&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; mutations &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;vuex/editor/mutations&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; &amp;#123; actionLogPlugin &amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;vuex/editor/plugins&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; store = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Vuex.Store(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  state,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  mutations,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  plugins: [actionLogPlugin]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; store&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这里又声明了 state 和 mutations 对象，以及声明了使用到的 plugins。plugins 后面再说，先看 state 和 mutations，相信各位读者已经对 Vuex 中各个部件的作用已经了如指掌，但是为防遗忘，还是贴一下这张图吧：&lt;/p&gt;
&lt;p&gt;state 是用于存储各种状态的&lt;strong&gt;核心仓库&lt;/strong&gt;，让我们一瞥 vuex/editor/state/index.js 中的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 编辑器相关状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; editor = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 页面相关状态&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;let&lt;/span&gt; page = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; state = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  editor,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  page&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; state&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;state 中存储了 &lt;strong&gt;editor&lt;/strong&gt; 和 &lt;strong&gt;page&lt;/strong&gt; 两个对象，用于存储不同模块的状态。需要说明的是，这里完全可以使用模块机制将其拆开，在 editor.js 里存储编辑器相关的 state 和 mutations，在 page.js 中存储页面相关的 state 和 mutations，以使结构更加清晰。不过这里没有使用模块机制，由于模块数量并不多，也是完全可以接受的。&lt;/p&gt;
&lt;p&gt;这些 state 需要反映到组件中。&lt;/p&gt;
&lt;p&gt;跳过官方文档中对为何不使用计算属性的解释，我们直接来看最佳实践：在子组件中通过 &lt;code&gt;vuex.getters&lt;/code&gt; 来获取该组件需要用到的所有状态：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// src/components/h5/Navbar.vue&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    methods: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    vuex: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      actions: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      getters: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        editor(state) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state.editor&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        page(state) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;          &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; state.page&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在 &lt;code&gt;vuex.getters&lt;/code&gt; 对象中，每个属性对应一个 getter 函数，该函数仅接收 store 中 state，也就是总的状态树作为唯一参数，然后返回 state 中需要的状态，然后在组件中就可以以 &lt;code&gt;this.editor&lt;/code&gt; 的方式直接调用，类似计算属性。&lt;/p&gt;
&lt;p&gt;再看一下 vuex/editor/mutations/index.js 中的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; types &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../mutation-types&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; mutations = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [types.CHANGE_LAYER_ZINDEX] (state, dir, index) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [types.DEL_LAYER] (state, index) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [types.REMOVE_FROM_ARR] (state, arr, itemToRemove) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [types.ADD_TO_ARR] (state, arr, itemToAdd) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  [types.DEL_SCENE] (state, index) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; mutations&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;具体业务逻辑这里不展开，mutations 中主要就是定义各种对 state 的状态修改。每个 mutation 函数接收&lt;strong&gt;第一个参数为 state 对象&lt;/strong&gt;，其余参数则为一路从组件中触发 action 时传过来的 payload。所有的 mutation 函数必须为&lt;strong&gt;同步&lt;/strong&gt;执行，否则无法追踪状态的改动。&lt;/p&gt;
&lt;p&gt;注意到，这里引入了 mutation-types.js。该文件主要作用为放置所有的命名 Mutations 的常量，方便合作开发人员厘清整个 app 包含的 mutations。在采用模块机制时，可以在每个模块内只引入相关的 mutations，也可以像本项目一样使用 &lt;code&gt;import * as types&lt;/code&gt; 简单粗暴地引入全部。&lt;/p&gt;
&lt;p&gt;mutation-types.js 中内容大致如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; CHANGE_LAYER_ZINDEX = &lt;span class=&quot;string&quot;&gt;&#39;CHANGE_LAYER_ZINDEX&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;const&lt;/span&gt; DEL_LAYER = &lt;span class=&quot;string&quot;&gt;&#39;DEL_LAYER&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后我们来到 &lt;strong&gt;actions&lt;/strong&gt;，照例先看一下 vuex/editor/actions/index.js 中的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;import&lt;/span&gt; * &lt;span class=&quot;keyword&quot;&gt;as&lt;/span&gt; types &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;../mutation-types&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delLayer&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; &amp;#123; dispatch &amp;#125;, index&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  dispatch(types.DEL_LAYER, index)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delScene&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; &amp;#123; dispatch &amp;#125;, index&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  dispatch(types.DEL_SCENE, index)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;removeFromArr&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; &amp;#123; dispatch &amp;#125;, arr, itemToRemove&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  dispatch(types.REMOVE_FROM_ARR, arr, itemToRemove)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;addToArr&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt; &amp;#123; dispatch &amp;#125;, arr, itemToAdd&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  dispatch(types.ADD_TO_ARR, arr, itemToAdd)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;actions 的主要工作就是 &lt;strong&gt;dispatch&lt;/strong&gt; （中文译为分发）mutations。初入门的同学可能觉得这是&lt;strong&gt;多此一举&lt;/strong&gt;，actions 这一步看起来完全可以省略。&lt;/p&gt;
&lt;p&gt;事实上，actions 的出现是为了弥补 mutations 无法实现异步操作的缺陷。所有的异步操作都可以放在 actions 中，比如如果想在调用 delScene 函数 5 秒后再分发 mutations，可以写成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;delScene&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&amp;#123; dispatch &amp;#125;, index&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  setTimeout(() =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    dispatch(types.DEL_SCENE, index)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;, &lt;span class=&quot;number&quot;&gt;5000&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;触发 mutations 的代码不会在组件中出现，&lt;strong&gt;但 actions 会出现在每个需要它的组件中&lt;/strong&gt;，其也是连接组件和 mutations 的桥梁（额，另一条桥梁是 state，见上面那张经典老图）。在子组件中引入 actions 的方式类似 state，也是注册在 vuex 选项下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// src/components/h5/Navbar.vue&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;import &amp;#123; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  undoAction, &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  redoAction,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  togglePreviewStatus,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125; &lt;span class=&quot;keyword&quot;&gt;from&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&#39;vuex/editor/actions&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    data () &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    methods: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    vuex: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      actions: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        undoAction,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        redoAction,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        togglePreviewStatus,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      getters: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这样，组件中可以直接调用各个 actions，比如 &lt;code&gt;this.togglePreviewStatus(status)&lt;/code&gt;，等价于&lt;code&gt;this.togglePreviewStatus( this.$store, status)&lt;/code&gt;（还记得我们在 actions 中定义的各个函数的第一个参数是 store 吗？）。这是最基本的使用 actions 的方式，在此基础上你还可以玩出别的花样来，比如给 actions 取别名、定义内联 actions、绑定所有 actions 等，具体用法参见官方文档。&lt;/p&gt;
&lt;p&gt;回过头去看 vuex 文件夹下的目录结构，发现还有一个 plugins 我们没有介绍。老规矩，先看一下  vuex/editor/plugins/index.js 中的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;export &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;actionLogPlugin&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;store&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  store.subscribe((mutation, state) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 每次 mutation 之后调用&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// mutation 的格式为 &amp;#123; type, payload &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;核心部分在于采用 &lt;code&gt;store.subscribe&lt;/code&gt; 注册了一个函数。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;该函数会在每次 mutation 之后被调用。这里 actionLogPlugin 函数完成的是记录每次 mutation 操作，实现撤销重做功能。具体实现逻辑此处不作赘述。&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Vuex 作为中大型 Vue 应用中的“御用”集中数据管理工具，在实习时的公司很早就得到了广泛使用。本文旨在以尽可能简洁的文字向读者展示：如何在一个颇具规模的 Vue 应用中&lt;strong&gt;组织和管理 Vuex 的代码&lt;/strong&gt;。&lt;/p&gt;
&lt;blockquote&gt;

    
    </summary>
    
      <category term="技术使用" scheme="http://chriscindy.top/categories/%E6%8A%80%E6%9C%AF%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Vue.js" scheme="http://chriscindy.top/tags/Vue-js/"/>
    
      <category term="Vuex" scheme="http://chriscindy.top/tags/Vuex/"/>
    
  </entry>
  
  <entry>
    <title>[译][草案] HTTP “带外”内容编码</title>
    <link href="http://chriscindy.top/2016/12/18/%E8%AF%91-%E8%8D%89%E6%A1%88-HTTP-%E2%80%9C%E5%B8%A6%E5%A4%96%E2%80%9D%E5%86%85%E5%AE%B9%E7%BC%96%E7%A0%81/"/>
    <id>http://chriscindy.top/2016/12/18/译-草案-HTTP-“带外”内容编码/</id>
    <published>2016-12-18T09:48:12.000Z</published>
    <updated>2016-12-18T10:11:39.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;这篇译文其实是高级计网课的作业，教授要求在 &lt;a href=&quot;ietf.org&quot;&gt;IETF&lt;/a&gt; 上找一篇尚未成为 RFC、也就是还处于草案状态的文档翻译一下。于是笔者随便搜了篇 HTTP 协议相关的文档。翻译完毕后感觉还是有一些收获的。这篇文档主要描述了一种新的内容编码格式——out-of-band（文中译为带外，但是我很不喜欢这个翻译，如有更合适的译词欢迎指正），用于描述包含客户端请求资源的辅助服务器的地址。此举可帮助源服务器建立“盲缓存”机制，将内容的传递安全地委派给辅助服务器，该辅助服务器可能在网络拓扑层次上来说“更接近”客户端。感兴趣的同学可以继续往下查看。&lt;/p&gt;
&lt;p&gt;Network Working Group&lt;br&gt;Internet-Draft&lt;br&gt;Intended status: Standards Track&lt;br&gt;Expires: May 3, 2017&lt;br&gt;October 30, 2016&lt;/p&gt;
&lt;p&gt;J. Reschke   greenbytes  S. Loreto  Ericsson&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h1 id=&quot;“带外”-HTTP-内容编码&quot;&gt;&lt;a href=&quot;#“带外”-HTTP-内容编码&quot; class=&quot;headerlink&quot; title=&quot;“带外” HTTP 内容编码&quot;&gt;&lt;/a&gt;“带外” HTTP 内容编码&lt;/h1&gt;&lt;h1 id=&quot;draft-reschke-http-oob-encoding-09&quot;&gt;&lt;a href=&quot;#draft-reschke-http-oob-encoding-09&quot; class=&quot;headerlink&quot; title=&quot;draft-reschke-http-oob-encoding-09&quot;&gt;&lt;/a&gt;draft-reschke-http-oob-encoding-09&lt;/h1&gt;&lt;h2 id=&quot;摘要&quot;&gt;&lt;a href=&quot;#摘要&quot; class=&quot;headerlink&quot; title=&quot;摘要&quot;&gt;&lt;/a&gt;摘要&lt;/h2&gt;&lt;p&gt;本文档描述了一种超文本传输协议（HTTP）的内容编码，其可用于描述包含有效负载的辅助资源的位置。&lt;/p&gt;
&lt;h2 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; class=&quot;headerlink&quot; title=&quot;目录&quot;&gt;&lt;/a&gt;目录&lt;/h2&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.  Introduction . . . . . . . . . . . . . . . . . . . . . . . . .  4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.  Notational Conventions . . . . . . . . . . . . . . . . . . . .  4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3.  &amp;apos;Out-Of-Band&amp;apos; Content Coding . . . . . . . . . . . . . . . . .  4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     3.1.  Overview . . . . . . . . . . . . . . . . . . . . . . . . .  4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     3.2.  Definitions  . . . . . . . . . . . . . . . . . . . . . . .  5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     3.3.  Processing Steps . . . . . . . . . . . . . . . . . . . . .  6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     3.4.  Examples . . . . . . . . . . . . . . . . . . . . . . . . .  7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      3.4.1.  Basic Example  . . . . . . . . . . . . . . . . . . . .  7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      3.4.2.  Example for an attempt to use &amp;apos;out-of-band&amp;apos; cross-origin . . . . . . . . . . . .  9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      3.4.3.  Example involving an encrypted resource  . . . . . . .  9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      3.4.4.  Relation to Content Negotiation  . . . . . . . . . . . 11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4.  Content Codings and Range Requests . . . . . . . . . . . . . . 12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5.  Feature Discovery  . . . . . . . . . . . . . . . . . . . . . . 12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6.  Security Considerations  . . . . . . . . . . . . . . . . . . . 13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     6.1.  Content Modifications  . . . . . . . . . . . . . . . . . . 13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     6.2.  Content Stealing . . . . . . . . . . . . . . . . . . . . . 13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     6.3.  Use in Requests  . . . . . . . . . . . . . . . . . . . . . 13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7.  IANA Considerations  . . . . . . . . . . . . . . . . . . . . . 13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     7.1.  Content Coding: out-of-band  . . . . . . . . . . . . . . . 14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     7.2.  Internet Media Type: application/oob-stream  . . . . . . . 14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8.  References . . . . . . . . . . . . . . . . . . . . . . . . . . 15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     8.1.  Normative References . . . . . . . . . . . . . . . . . . . 15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     8.2.  Informative References . . . . . . . . . . . . . . . . . . 16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Appendix A.  Problem Reporting . . . . . . . . . . . . . . . . . . 17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    A.1.  Server Not Reachable . . . . . . . . . . . . . . . . . . . 18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    A.2.  Resource Not Found . . . . . . . . . . . . . . . . . . . . 18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    A.3.  Payload Unusable . . . . . . . . . . . . . . . . . . . . . 18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    A.4.  TLS Handshake Failure  . . . . . . . . . . . . . . . . . . 18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    A.5.  Example For Problem Reporting  . . . . . . . . . . . . . . 18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Appendix B.  Alternatives, or: why not a new Status Code?  . . . . 19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Appendix C.  Open Issues . . . . . . . . . . . . . . . . . . . . . 19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    C.1.  Accessing the Secondary Resource Too Early . . . . . . . . 19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    C.2.  Resource maps  . . . . . . . . . . . . . . . . . . . . . . 20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    C.3.  Fragmenting  . . . . . . . . . . . . . . . . . . . . . . . 20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    C.4.  Relation to Content Encryption . . . . . . . . . . . . . . 21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    C.5.  Reporting  . . . . . . . . . . . . . . . . . . . . . . . . 21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    C.6.  Controlling Transmission Of Various Request Header Fields . . . . . . . .  . . . . . 21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Appendix D.  Change Log (to be removed by RFC Editor before publication)  . . . . . . . .  . . 22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    D.1.  Changes since draft-reschke-http-oob-encoding-00 . . . . . 22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    D.2.  Changes since draft-reschke-http-oob-encoding-01 . . . . . 22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    D.3.  Changes since draft-reschke-http-oob-encoding-02 . . . . . 22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    D.4.  Changes since draft-reschke-http-oob-encoding-03 . . . . . 22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    D.5.  Changes since draft-reschke-http-oob-encoding-04 . . . . . 22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    D.6.  Changes since draft-reschke-http-oob-encoding-05 . . . . . 23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    D.7.  Changes since draft-reschke-http-oob-encoding-06 . . . . . 23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    D.8.  Changes since draft-reschke-http-oob-encoding-07 . . . . . 23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    D.9.  Changes since draft-reschke-http-oob-encoding-08 . . . . . 23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Appendix E.  Acknowledgements  . . . . . . . . . . . . . . . . . . 24&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;1-介绍&quot;&gt;&lt;a href=&quot;#1-介绍&quot; class=&quot;headerlink&quot; title=&quot;1. 介绍&quot;&gt;&lt;/a&gt;1. 介绍&lt;/h2&gt;&lt;p&gt;本文档描述了超文本传输协议（HTTP）的内容编码（[RFC7231] 的第 3.1.2.1 节），其可用于描述包含有效负载辅助资源的位置。&lt;/p&gt;
&lt;p&gt;此内容编码的主要用例是使得源服务器将内容的传递安全地委派给辅助服务器，该服务器可能“更接近”客户端（相对于网络拓扑上来说）和/或能够缓存内容（[SCD]）并加密内容（[ENCRYPTENC]）。&lt;/p&gt;
&lt;h2 id=&quot;2-符号约定&quot;&gt;&lt;a href=&quot;#2-符号约定&quot; class=&quot;headerlink&quot; title=&quot;2. 符号约定&quot;&gt;&lt;/a&gt;2. 符号约定&lt;/h2&gt;&lt;p&gt;该文档中的关键词“MUST”，“MUST NOT”，“REQUIRED”，“SHALL”，“SHALL NOT”，“SHOULD”，“SHOULD NOT”，“RECOMMENDED”，“MAY”和“OPTIONAL”应按 [RFC2119] 中所述进行解释。&lt;/p&gt;
&lt;p&gt;本文重用基本 HTTP 规范，即 [RFC7230] 的第 2 节和 [RFC7231] 中的第 3 节中使用的术语。&lt;/p&gt;
&lt;h2 id=&quot;3-“带外”内容编码&quot;&gt;&lt;a href=&quot;#3-“带外”内容编码&quot; class=&quot;headerlink&quot; title=&quot;3.  “带外”内容编码&quot;&gt;&lt;/a&gt;3.  “带外”内容编码&lt;/h2&gt;&lt;h3 id=&quot;3-1-概述&quot;&gt;&lt;a href=&quot;#3-1-概述&quot; class=&quot;headerlink&quot; title=&quot;3.1 概述&quot;&gt;&lt;/a&gt;3.1 概述&lt;/h3&gt;&lt;p&gt;带外内容编码用于指导接收者从一个辅助资源比如公共缓存处检索实际的消息表示（参见[RFC7231] 的第 3 节）&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;客户端发送一个请求&lt;/li&gt;
&lt;li&gt;接收到的响应指定“带外”内容编码；该响应的负载包含了额外的元数据，以及辅助资源的位置信息&lt;/li&gt;
&lt;li&gt;客户端向辅助资源发送 GET 请求（通常也是通过 HTTP(s)）&lt;/li&gt;
&lt;li&gt;辅助服务器提供有效负载资源&lt;/li&gt;
&lt;li&gt;客户端将以上的表示和从主要资源处获得的表示元数据结合起来&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;客户端                   辅助服务器                   源服务器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    发送带有 Accept-Encoding: out-of-band 头的 GET 请求&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(1) |---------------------------------------------------------\&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                  状态码 200 以及返回头 Content-Coding: out-of-band |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(2) &amp;lt;---------------------------------------------------------/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    向辅助服务器发送 GET 请求&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(3) |---------------------------\&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                       有效负载 |&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(4) &amp;lt;---------------------------/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(5)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    客户端将第（4）步接收到的 有效负载和第（2）步接收到的元数据结合起来。&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-2-定义&quot;&gt;&lt;a href=&quot;#3-2-定义&quot; class=&quot;headerlink&quot; title=&quot;3.2 定义&quot;&gt;&lt;/a&gt;3.2 定义&lt;/h3&gt;&lt;p&gt;该内容编码的名称为“带外”。&lt;/p&gt;
&lt;p&gt;有效负载格式为 JavaScript 对象标记（即 JSON，参见 [RFC7159]）,用于描述一个描述辅助资源信息的对象；目前仅仅定义了一个成员：&lt;/p&gt;
&lt;p&gt;“sr”：一个必需的 JSON 对象数组。每个对象包括一个名为“r”的成员，该成员用于描述一个辅助资源的信息，其值为包含一个对该辅助资源的 URI 引用（参见 [RFC3986]的 4.1 小节）的字符串（作为相对引用的 URI 引用会根据主资源的 URI 来解析）。&lt;/p&gt;
&lt;p&gt;有效负载格式使用数组以保证源服务器可以指定多个辅助资源地址。数组的排序反映了源服务器对待辅助资源的优先级（如果存在的话）。优先级最高的辅助资源位置将排在第一位。客户端在接收到包含多个辅助资源位置的响应时可以自由选择使用哪一个辅助资源。&lt;/p&gt;
&lt;p&gt;在某些情况下，源服务器可能想指定一个“回退 URI”；标识一个由源服务器自身提供的辅助资源，但是除此以外和其他“常规”辅助资源完全相等。任何由源服务器作为主机的辅助资源都可以作为一个“回退”；源服务器通常将这些辅助资源列在“sr”数组的最后，以使它们只有在没有其他选择时才会被客户端使用。&lt;/p&gt;
&lt;p&gt;新的规范可以定义新的可选成员字段，因此客户端必须忽略未知字段。此外，新的规范还可以为“sr”数组定义新的对象格式；但是，除非语义上与以上定义的部分相兼容，否则新规范不得使用名为“r”的成员。&lt;/p&gt;
&lt;p&gt;扩展的规范必须更新此规范。&lt;/p&gt;
&lt;h3 id=&quot;3-3-处理步骤&quot;&gt;&lt;a href=&quot;#3-3-处理步骤&quot; class=&quot;headerlink&quot; title=&quot;3.3 处理步骤&quot;&gt;&lt;/a&gt;3.3 处理步骤&lt;/h3&gt;&lt;p&gt;在接收到一个“带外”编码的响应时，客户端首先需要获得辅助资源的呈现。这是使用 HTTP 的 GET 请求实现的（独立于原始请求方法）。&lt;/p&gt;
&lt;p&gt;为了防止任何信息泄漏，对辅助资源的 GET 请求必须只包含由源服务器或者辅助服务器自身提供的信息，即 HTTP 认证凭证（[RFC7235]）和 cookie（[RFC6265]）。&lt;/p&gt;
&lt;p&gt;此外，该请求必须包括“Origin”报头字段，用于指示原始资源的来源（参见 [RFC6454]的第 7 节）。 辅助服务器必须验证该特定源是经过授权的，才可以检索给定的有效载荷（或以其他方式返回适当的 4xx 状态码）。&lt;/p&gt;
&lt;p&gt;除此之外，辅助服务器的响应必须包括一个“Content-Type”报头字段，用于指定一种叫做“application / oob-stream”的互连网媒体类型。 客户端必须校验此媒体类型。如果未指定媒体类型，或其并不匹配此值，则中止带外处理。&lt;/p&gt;
&lt;p&gt;在接收到辅助资源的有效负载后，客户端通过以下方式重构原始消息：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;通过去除所有传输和内容编码来解封装 HTTP 消息&lt;/li&gt;
&lt;li&gt;替换/设置来自主响应的所有响应头字段，除了 Content-Length，Transfer-Encoding 以及 Content-Encoding 等帧相关的信息。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果客户端无法检索辅助资源（无法访问主机，非 2xx 响应状态代码，有效载荷完整性校验失败等），它可以选择替代的辅助资源（如果有指定），尝试回退 URI（如果给定），或者简单地重新向源服务器发起请求，但在 Accept-Encoding 请求头字段中不包含 “out-of-band”。在后一种情况下，将请求辅助资源时遇到的问题通知到源服务器是有用的。详情见附录A。&lt;br&gt;​&lt;br&gt;注意，尽管这种机制导致引入了外部内容，但是它不会影响重构消息的应用程序级的安全属性，比如它的 web 源（[RFC6454]）。&lt;/p&gt;
&lt;p&gt;辅助资源的响应的缓存能力不会影响重构的响应消息的缓存能力，重构的响应消息的缓存能力与与原始服务器的响应相同。&lt;/p&gt;
&lt;p&gt;“带外”编码的使用在某些方面类似于 HTTP 重定向（参见 [RFC7231] 第 6.4 节），比如它可能导致循环。除非遇到 HTTP 重定向，否则客户端是完全处于控制的：它不需要在向辅助资源的请求中宣称支持“带外”编码。或者，它可以像在 HTTP 重定向情况下一样保护自己——通过限制其支持的间接寻址的数量。&lt;/p&gt;
&lt;p&gt;注意，因为服务器的响应取决于请求的 Accept-Encoding 头字段，响应通常需要宣告其上的变化。详情参见 [RFC7231] 的 7.1.4 节和 [RFC7232] 的 2.3 节。&lt;/p&gt;
&lt;h3 id=&quot;3-4-示例&quot;&gt;&lt;a href=&quot;#3-4-示例&quot; class=&quot;headerlink&quot; title=&quot;3.4 示例&quot;&gt;&lt;/a&gt;3.4 示例&lt;/h3&gt;&lt;h4 id=&quot;3-4-1-基本示例&quot;&gt;&lt;a href=&quot;#3-4-1-基本示例&quot; class=&quot;headerlink&quot; title=&quot;3.4.1 基本示例&quot;&gt;&lt;/a&gt;3.4.1 基本示例&lt;/h4&gt;&lt;p&gt;客户端向位于 &lt;a href=&quot;https://www.example.com/test&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.example.com/test&lt;/a&gt; 的主资源发送请求：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/test&lt;/span&gt; HTTP/1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Host&lt;/span&gt;: www.example.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Accept-Encoding&lt;/span&gt;: gzip, out-of-band&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;响应：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Date: Thu, 14 May 2015 18:52:00 GMT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Type: text/plain&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cache-Control: max-age=10, public&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Encoding: out-of-band&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Length: 165&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vary: Accept-Encoding&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;sr&quot;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123; &quot;r&quot; :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &quot;http://example.net/bae27c36-fa6a-11e4-ae5d-00059a3c7a00&quot;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123; &quot;r&quot; :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;       &quot;/c/bae27c36-fa6a-11e4-ae5d-00059a3c7a00&quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（注意到 Content-Type 头字段描述了辅助资源的媒体类型，同时源服务器提供了回退 URI）&lt;/p&gt;
&lt;p&gt;客户端向辅助资源发送请求：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/bae27c36-fa6a-11e4-ae5d-00059a3c7a00&lt;/span&gt; HTTP/1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Host&lt;/span&gt;: example.net&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Origin&lt;/span&gt;: https://www.example.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;响应:&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Date: Thu, 14 May 2015 18:52:10 GMT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cache-Control: private&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Type: application/oob-stream&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Length: 15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hello, world.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在重组头字段后，最终的消息如下：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Date: Thu, 14 May 2015 18:52:00 GMT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Length: 15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Cache-Control: max-age=10, public&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Type: text/plain&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Hello, world.&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h4 id=&quot;3-4-2-尝试跨域使用“带外”的示例&quot;&gt;&lt;a href=&quot;#3-4-2-尝试跨域使用“带外”的示例&quot; class=&quot;headerlink&quot; title=&quot;3.4.2 尝试跨域使用“带外”的示例&quot;&gt;&lt;/a&gt;3.4.2 尝试跨域使用“带外”的示例&lt;/h4&gt;&lt;p&gt;3.3 小节需要客户端在向辅助服务器发送的请求中包含一个“Origin”头字段。下面的例子展示了用于处理辅助资源的服务器将如何响应一个包含了“Origin”头字段的请求，同时该头字段标识了一个未经授权的源。&lt;/p&gt;
&lt;p&gt;继续 3.4.1 小节中的例子，一个辅助服务器已被配置，其能够允许由“&lt;a href=&quot;https://www.example.org”启动的请求：&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://www.example.org”启动的请求：&lt;/a&gt;&lt;br&gt;​&lt;br&gt;客户端向辅助服务器发起的请求：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/bae27c36-fa6a-11e4-ae5d-00059a3c7a00&lt;/span&gt; HTTP/1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Host&lt;/span&gt;: example.net&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Origin&lt;/span&gt;: https://www.example.com&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;响应：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;403&lt;/span&gt; Forbidden&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Date&lt;/span&gt;: Thu, 14 May 2015 18:52:10 GMT&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意，缺少“Origin”头字段的请求将获得同以上请求一样的对待。&lt;/p&gt;
&lt;h4 id=&quot;3-4-3-含有加密资源的示例&quot;&gt;&lt;a href=&quot;#3-4-3-含有加密资源的示例&quot; class=&quot;headerlink&quot; title=&quot;3.4.3 含有加密资源的示例&quot;&gt;&lt;/a&gt;3.4.3 含有加密资源的示例&lt;/h4&gt;&lt;p&gt;给定来自 [ENCRYPTENC] 5.1 小节的示例 HTTP 消息，主要资源可以使用“带外”编码来指定辅助资源的位置以及解密有效载荷所需的“Crypto-Key”报头字段的内容：&lt;/p&gt;
&lt;p&gt;响应：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Date: Thu, 14 May 2015 18:52:00 GMT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Encoding: aesgcm, out-of-band&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Type: text/plain&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Encryption: keyid=&quot;a1&quot;; salt=&quot;vr0o6Uq3w_KDWeatc27mUg&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Crypto-Key: keyid=&quot;a1&quot;; aesgcm=&quot;csPJEXBYA5U-Tal9EdJi-w&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Length: 101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Vary: Accept-Encoding&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;sr&quot;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123; &quot;r&quot; :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &quot;http://example.net/bae27c36-fa6a-11e4-ae5d-00059a3c7a00&quot;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（注意，Content-Type 头字段描述了辅助资源的表现形式）&lt;br&gt;辅助资源的响应：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Date: Thu, 14 May 2015 18:52:10 GMT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Type: application/oob-stream&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Length: ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;VDeU0XxaJkOJDAxPl7h9JD5V8N43RorP7PfpPdZZQuwF&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;（这里负载体以 base64 的编码格式显示）&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;解开所有内容编码后的最终消息形式为：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTTP/1.1 200 OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Date: Thu, 14 May 2015 18:52:00 GMT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Length: 15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Content-Type: text/plain&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;I am the walrus&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注意：在这种情况下，解码“aesgcm”需要先处理响应。如果在请求中“aesgcm”没有被列为可接受的内容编码，源服务器将不能使用“带外”机制。&lt;/p&gt;
&lt;p&gt;“带外”编码的使用是“积极内容协商”的一个实例，该概念在 [RFC7231] 的 3.4 小节被定义。&lt;/p&gt;
&lt;p&gt;然而，这并不排除将其与其他内容组合编码。 举个例子，与“gzip”内容编码（参见 [RFC7230] 的第 4.2.3 节）可能组合的情形被描述如下：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;实例1： 主资源不支持“gzip”编码&lt;br&gt;在这种情况下，主资源的响应将永远不会在 Content-Encoding 头字段中包含“gzip”。但是辅助资源可能支持它，在这种情况下客户端可以通过在向辅助资源的请求中包含“Accept-Encoding：gzip”来协商压缩。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;实例2：主资源支持“gzip”编码&lt;br&gt;这里，原始服务器实际上将使用两个不同的辅助资源，其中之一是经过 gzip 压缩的。 例如——回到 3.4.1 节的第一个例子——它可能回复如下：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;200&lt;/span&gt; OK&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Date&lt;/span&gt;: Thu, 14 May 2015 18:52:00 GMT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: text/plain&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Cache-Control&lt;/span&gt;: max-age=10, public&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Content-Encoding&lt;/span&gt;: gzip, out-of-band&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: 165&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Vary&lt;/span&gt;: Accept-Encoding&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;json&quot;&gt;&amp;#123;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;sr&quot;&lt;/span&gt;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;&quot;r&quot;&lt;/span&gt; :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;http://example.net/bae27c36-fa6a-11e4-ae5d-00059a3c7a01&quot;&lt;/span&gt;&amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#123; &lt;span class=&quot;attr&quot;&gt;&quot;r&quot;&lt;/span&gt; :&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;string&quot;&gt;&quot;/c/bae27c36-fa6a-11e4-ae5d-00059a3c7a01&quot;&lt;/span&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;这意味着辅助资源的有效负载已经经过 gzip 压缩。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注意：原始服务器也可以将 gzip 压缩应用于带外有效载荷，在这种情况下内容编码字段的值将变为：“gzip，out-of-band，gzip”。&lt;/p&gt;
&lt;h2 id=&quot;4-内容编码和范围请求&quot;&gt;&lt;a href=&quot;#4-内容编码和范围请求&quot; class=&quot;headerlink&quot; title=&quot;4. 内容编码和范围请求&quot;&gt;&lt;/a&gt;4. 内容编码和范围请求&lt;/h2&gt;&lt;p&gt;内容编码的组合（参见 [RFC7231] 的第 3.1.2 节与范围请求（[RFC7233]）可以导致令人惊讶的结果，因为应用范围请求在应用内容编码之后发生。&lt;/p&gt;
&lt;p&gt;因此，对于从位置 100000 字节处开始的视频的请求：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/test.mp4&lt;/span&gt; HTTP/1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Host&lt;/span&gt;: www.example.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Range&lt;/span&gt;: bytes=100000-&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Accept-Encoding&lt;/span&gt;: identity&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;……成功的响应将使用 206 状态码（部分内容），并且包含一个内容为从位置 100000 开始的八位字节的有效负载。&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;206&lt;/span&gt; Partial Content&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Date&lt;/span&gt;: Thu, 08 September 2015 16:49:00 GMT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: video/mp4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: 134567&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Content-Range&lt;/span&gt;: bytes 100000-234566/234567&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;(二进制数据)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是，如果请求允许使用“带外”编码：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/test.mp4&lt;/span&gt; HTTP/1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Host&lt;/span&gt;: www.example.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Range&lt;/span&gt;: bytes=100000-&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Accept-Encoding&lt;/span&gt;: out-of-band&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;……服务器可能会返回一个空的负载（如果经过带外编码的响应体小于 100000 字节，而通常情况下就是这样的）。&lt;/p&gt;
&lt;p&gt;因此，为了避免不必要的网络流量，服务器“不应该”将范围请求处理应用于使用带外内容编码的响应（或者，换句话说，忽略“Range”请求头字段）。&lt;/p&gt;
&lt;h2 id=&quot;5-功能探索&quot;&gt;&lt;a href=&quot;#5-功能探索&quot; class=&quot;headerlink&quot; title=&quot;5. 功能探索&quot;&gt;&lt;/a&gt;5. 功能探索&lt;/h2&gt;&lt;p&gt;新的内容编码很容易进行部署，因为客户端可以使用“Accept-Encoding”头字段（参见 [RFC7231]的 5.3.4 小节）来标记其支持哪些内容编码。&lt;/p&gt;
&lt;h2 id=&quot;6-安全事项&quot;&gt;&lt;a href=&quot;#6-安全事项&quot; class=&quot;headerlink&quot; title=&quot;6. 安全事项&quot;&gt;&lt;/a&gt;6. 安全事项&lt;/h2&gt;&lt;h3 id=&quot;6-1-内容修改&quot;&gt;&lt;a href=&quot;#6-1-内容修改&quot; class=&quot;headerlink&quot; title=&quot;6.1 内容修改&quot;&gt;&lt;/a&gt;6.1 内容修改&lt;/h3&gt;&lt;p&gt;本规范没有定义如何验证从辅助资源处获得的有效负载是否确实是源服务器期望获得的。不过内容签名可以解决这个问题（见[CONTENTSIG]和[MICE]）。&lt;/p&gt;
&lt;h3 id=&quot;6-2-内容窃取&quot;&gt;&lt;a href=&quot;#6-2-内容窃取&quot; class=&quot;headerlink&quot; title=&quot;6.2 内容窃取&quot;&gt;&lt;/a&gt;6.2 内容窃取&lt;/h3&gt;&lt;p&gt;“带外”内容编码可以用于规避用户代理的同源原则策略（参见 [RFC6454] 第 3 节）：知道辅助资源的 URI 攻击站点将使用“带外”编码来欺骗用户代理读取辅助资源的内容，然后，由于这种编码的安全属性，这种欺骗行为将被识别成好像其产生于源地址。&lt;/p&gt;
&lt;p&gt;这种情况可以这样处理：客户端要求包括“Origin”头字段，同时服务端需要验证收到的请求是由经过验证的源发送的。此外，辅助服务器的响应的媒体类型对“application / oob-stream”的限制能够保护未实现此规范的“正常”服务器上的现有内容。&lt;/p&gt;
&lt;p&gt;注：与“跨源资源共享”协议（[CORS]）的相似是有意为之的。&lt;br&gt;对辅助资源的有效内容进行加密（[ENCRYPTENC]）是一个额外的有效措施。&lt;/p&gt;
&lt;h3 id=&quot;6-3-在请求中的使用&quot;&gt;&lt;a href=&quot;#6-3-在请求中的使用&quot; class=&quot;headerlink&quot; title=&quot;6.3 在请求中的使用&quot;&gt;&lt;/a&gt;6.3 在请求中的使用&lt;/h3&gt;&lt;p&gt;一般来说，内容编码可以用于请求和响应。 这个特定的内容编码已经被设计用于响应。 当请求中也支持时，它会创建一个新的攻击方向，接收服务器可以被欺骗，然后返回客户端可能原本无法访问的内容（例如由防火墙保护的 HTTP 资源）。&lt;/p&gt;
&lt;h2 id=&quot;7-IANA-注意事项&quot;&gt;&lt;a href=&quot;#7-IANA-注意事项&quot; class=&quot;headerlink&quot; title=&quot;7. IANA 注意事项&quot;&gt;&lt;/a&gt;7. IANA 注意事项&lt;/h2&gt;&lt;h3 id=&quot;7-1-Content-Coding-out-of-band&quot;&gt;&lt;a href=&quot;#7-1-Content-Coding-out-of-band&quot; class=&quot;headerlink&quot; title=&quot;7.1 Content Coding: out-of-band&quot;&gt;&lt;/a&gt;7.1 Content Coding: out-of-band&lt;/h3&gt;&lt;p&gt;网址为&lt;a href=&quot;http://www.iana.org/assignments/http-parameters&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.iana.org/assignments/http-parameters&lt;/a&gt;的 IANA（互联网号码分配局） 的“HTTP 内容编码注册”需要用以下的注册内容来更新：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Name:  out-of-band&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Description:  Payload needs to be retrieved from a secondary resource&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Reference:  Section 3 of this document&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;7-2-Internet-Media-Type-application-oob-stream&quot;&gt;&lt;a href=&quot;#7-2-Internet-Media-Type-application-oob-stream&quot; class=&quot;headerlink&quot; title=&quot;7.2 Internet Media Type: application/oob-stream&quot;&gt;&lt;/a&gt;7.2 Internet Media Type: application/oob-stream&lt;/h3&gt;&lt;p&gt;IANA 在&lt;a href=&quot;http://www.iana.org/assignments/media-types&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://www.iana.org/assignments/media-types&lt;/a&gt;上维护互联网媒体类型 [BCP13] 的注册。&lt;/p&gt;
&lt;p&gt;此文档用作互联网媒体类型“application / oob-stream” 的规范。 以下是在 IANA 要注册的内容：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Type name:  application&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Subtype name:  oob-stream&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Required parameters:  N/A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Optional parameters:  N/A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Encoding considerations:  always &amp;quot;binary&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Security considerations:  see Section 6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Interoperability considerations:  N/A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Published specification:  This specification (see Section 7.2).&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Applications that use this media type:  HTTP servers for secondary&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  resources as defined by this specification.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Fragment identifier considerations:  N/A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Additional information:&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Magic number(s):  N/A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Deprecated alias names for this type:  N/A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  File extension(s):  N/A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Macintosh file type code(s):  N/A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Person and email address to contact for further information:  See&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  Authors&amp;apos; Addresses section.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Intended usage:  COMMON&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Restrictions on usage:  N/A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Author:  See Authors&amp;apos; Addresses section.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Change controller:  IESG&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;8-参考文献&quot;&gt;&lt;a href=&quot;#8-参考文献&quot; class=&quot;headerlink&quot; title=&quot;8. 参考文献&quot;&gt;&lt;/a&gt;8. 参考文献&lt;/h2&gt;&lt;h3 id=&quot;8-1-规范性引用文件&quot;&gt;&lt;a href=&quot;#8-1-规范性引用文件&quot; class=&quot;headerlink&quot; title=&quot;8.1 规范性引用文件&quot;&gt;&lt;/a&gt;8.1 规范性引用文件&lt;/h3&gt;&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;43&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;44&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;45&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;46&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;47&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;48&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;49&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;50&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;51&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;52&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;53&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;54&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;55&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;56&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;57&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;58&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;59&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;60&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;61&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;62&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;63&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;64&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;65&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;66&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;67&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;68&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;69&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;70&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;71&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;72&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;73&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;74&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;75&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;76&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;77&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;78&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;79&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;80&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;81&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;82&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;83&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;84&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;85&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;86&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;87&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;88&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;89&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;90&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;91&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;92&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;93&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;94&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;95&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;96&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;97&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;98&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;99&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;100&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;101&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;102&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;103&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;104&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;105&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;106&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;107&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;108&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;109&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;110&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;111&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;112&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;113&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;114&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;115&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;116&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;117&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;118&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;[RFC2119]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bradner, S., &amp;quot;Key words for use in RFCs to Indicate&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Requirement Levels&amp;quot;, BCP 14, RFC 2119, DOI 10.17487/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RFC2119, March 1997,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc2119&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC3986]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Berners-Lee, T., Fielding, R., and L. Masinter,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;Uniform Resource Identifier (URI): Generic Syntax&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;STD 66, RFC 3986, DOI 10.17487/RFC3986, January 2005,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc3986&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC5988]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Nottingham, M., &amp;quot;Web Linking&amp;quot;, RFC 5988, DOI 10.17487/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RFC5988, October 2010,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc5988&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC6265]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Barth, A., &amp;quot;HTTP State Management Mechanism&amp;quot;, RFC 6265,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DOI 10.17487/RFC6265, April 2011,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc6265&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC7159]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Bray, T., &amp;quot;The JavaScript Object Notation (JSON) Data&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Interchange Format&amp;quot;, RFC 7159, DOI 10.17487/RFC7159,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;March 2014, &amp;lt;http://www.rfc-editor.org/info/rfc7159&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC7230]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Fielding, R., Ed. and J. Reschke, Ed., &amp;quot;Hypertext&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Transfer Protocol (HTTP/1.1): Message Syntax and&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Routing&amp;quot;, RFC 7230, DOI 10.17487/RFC7230, June 2014,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc7230&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC7231]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Fielding, R., Ed. and J. Reschke, Ed., &amp;quot;Hypertext&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Transfer Protocol (HTTP/1.1): Semantics and Content&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RFC 7231, DOI 10.17487/RFC7231, June 2014,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc7231&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC7235]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Fielding, R., Ed. and J. Reschke, Ed., &amp;quot;Hypertext&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Transfer Protocol (HTTP/1.1): Authentication&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RFC 7235, DOI 10.17487/RFC7235, June 2014,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc7235&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[BCP13]       &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Freed, N., Klensin, J., and T. Hansen, &amp;quot;Media Type&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Specifications and Registration Procedures&amp;quot;, BCP 13,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RFC 6838, January 2013,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/bcp13&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[CONTENTSIG]  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Thomson, M., &amp;quot;Content-Signature Header Field for HTTP&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;draft-thomson-http-content-signature-00 (work in&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;progress), July 2015.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[CORS]        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;van Kesteren, A., &amp;quot;Cross-Origin Resource Sharing&amp;quot;, W3C&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Recommendation REC-cors-20140116, January 2014,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.w3.org/TR/2014/REC-cors-20140116/&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Latest version available at&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.w3.org/TR/cors/&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[ENCRYPTENC]  &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Thomson, M., &amp;quot;Encrypted Content-Encoding for HTTP&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;draft-ietf-httpbis-encryption-encoding-03 (work in&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;progress), October 2016.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[MICE]        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Thomson, M., &amp;quot;Merkle Integrity Content Encoding&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;draft-thomson-http-mice-02 (work in progress),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;October 2016.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC2017]    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Freed, N. and K. Moore, &amp;quot;Definition of the URL MIME&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;External-Body Access-Type&amp;quot;, RFC 2017, DOI 10.17487/&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RFC2017, October 1996,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc2017&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC4483]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Burger, E., &amp;quot;A Mechanism for Content Indirection in&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Session Initiation Protocol (SIP) Messages&amp;quot;, RFC 4483,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DOI 10.17487/RFC4483, May 2006,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc4483&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC5246]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Dierks, T. and E. Rescorla, &amp;quot;The Transport Layer&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Security (TLS) Protocol Version 1.2&amp;quot;, RFC 5246,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DOI 10.17487/RFC5246, August 2008,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc5246&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC6454]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Barth, A., &amp;quot;The Web Origin Concept&amp;quot;, RFC 6454,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;DOI 10.17487/RFC6454, December 2011,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc6454&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC7232]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Fielding, R., Ed. and J. Reschke, Ed., &amp;quot;Hypertext&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Transfer Protocol (HTTP/1.1): Conditional Requests&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;RFC 7232, DOI 10.17487/RFC7232, June 2014,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc7232&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[RFC7233]     &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Fielding, R., Ed., Lafon, Y., Ed., and J. Reschke, Ed.,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;quot;Hypertext Transfer Protocol (HTTP/1.1): Range&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Requests&amp;quot;, RFC 7233, DOI 10.17487/RFC7233, June 2014,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;http://www.rfc-editor.org/info/rfc7233&amp;gt;.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[SCD]        &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Thomson, M., Eriksson, G., and C. Holmberg, &amp;quot;An&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Architecture for Secure Content Delegation using HTTP&amp;quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;draft-thomson-http-scd-02 (work in progress),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;October 2016.&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;URIs&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[1]  &amp;lt;mailto:ietf-http-wg@w3.org&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[2]  &amp;lt;mailto:ietf-http-wg-request@w3.org?subject=subscribe&amp;gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;附录-A-问题报告&quot;&gt;&lt;a href=&quot;#附录-A-问题报告&quot; class=&quot;headerlink&quot; title=&quot;附录 A. 问题报告&quot;&gt;&lt;/a&gt;附录 A. 问题报告&lt;/h2&gt;&lt;p&gt;[[erwip：这是一个错误报告机制的粗略建议。它够好吗？ 是否需要它？ 注意，Alt-Svc 没有这样的东西。]]&lt;/p&gt;
&lt;p&gt;当客户端无法获取辅助资源时，通知源服务器该状况将是有用的。这可以通过添加一个“Link”报头字段（[RFC5988]）到后续发往源服务器的请求来实现。同时该头字段需要详细说明辅助资源的 URI 和失败原因。&lt;/p&gt;
&lt;p&gt;定义以下链路扩展关系：&lt;/p&gt;
&lt;p&gt;[[purl：需要注册 PURL（现在由 archive.org，FWIW 托管）]]&lt;/p&gt;
&lt;h3 id=&quot;A-1-服务器不可达&quot;&gt;&lt;a href=&quot;#A-1-服务器不可达&quot; class=&quot;headerlink&quot; title=&quot;A.1 服务器不可达&quot;&gt;&lt;/a&gt;A.1 服务器不可达&lt;/h3&gt;&lt;p&gt;当服务器不可达时使用。&lt;br&gt;链接关系：&lt;br&gt;&lt;a href=&quot;http://purl.org/NET/linkrel/not-reachable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://purl.org/NET/linkrel/not-reachable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;A-2-资源未发现&quot;&gt;&lt;a href=&quot;#A-2-资源未发现&quot; class=&quot;headerlink&quot; title=&quot;A.2 资源未发现&quot;&gt;&lt;/a&gt;A.2 资源未发现&lt;/h3&gt;&lt;p&gt;当服务器返回响应，但是目标不可获取时使用。&lt;br&gt;链接关系：&lt;br&gt;&lt;a href=&quot;http://purl.org/NET/linkrel/resource-not-found&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://purl.org/NET/linkrel/resource-not-found&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;A-3-负载无法使用&quot;&gt;&lt;a href=&quot;#A-3-负载无法使用&quot; class=&quot;headerlink&quot; title=&quot;A.3 负载无法使用&quot;&gt;&lt;/a&gt;A.3 负载无法使用&lt;/h3&gt;&lt;p&gt;当负责可以获取到，但是不可使用（例如，完整性校验失败）时使用。&lt;br&gt;链接关系：&lt;br&gt;&lt;a href=&quot;http://purl.org/NET/linkrel/payload-unusable&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://purl.org/NET/linkrel/payload-unusable&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;A-4-TLS-握手失败&quot;&gt;&lt;a href=&quot;#A-4-TLS-握手失败&quot; class=&quot;headerlink&quot; title=&quot;A.4 TLS 握手失败&quot;&gt;&lt;/a&gt;A.4 TLS 握手失败&lt;/h3&gt;&lt;p&gt;当 TLS 握手失败时使用（[RFC5246]）。&lt;br&gt;链接关系：&lt;br&gt;&lt;a href=&quot;http://purl.org/NET/linkrel/tls-handshake-failure&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://purl.org/NET/linkrel/tls-handshake-failure&lt;/a&gt;&lt;/p&gt;
&lt;h3 id=&quot;A-5-问题报告的示例&quot;&gt;&lt;a href=&quot;#A-5-问题报告的示例&quot; class=&quot;headerlink&quot; title=&quot;A.5 问题报告的示例&quot;&gt;&lt;/a&gt;A.5 问题报告的示例&lt;/h3&gt;&lt;p&gt;拿 3.4.1 节客户端向主资源发起的请求为例，此时假设尝试获取辅助资源失败。&lt;/p&gt;
&lt;p&gt;响应:&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;HTTP/1.1 &lt;span class=&quot;number&quot;&gt;404&lt;/span&gt; Not Found&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Date&lt;/span&gt;: Thu, 08 September 2015 16:49:00 GMT&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Content-Type&lt;/span&gt;: text/plain&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Content-Length&lt;/span&gt;: 20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;undefined&quot;&gt;Resource Not Found&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;客户端重新向源服务器发起请求，请求中包括“Link”头字段，用于报告问题：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/test&lt;/span&gt; HTTP/1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Host&lt;/span&gt;: www.example.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Accept-Encoding&lt;/span&gt;: gzip, out-of-band&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Link&lt;/span&gt;: &amp;lt;http://example.net/bae27c36-fa6a-11e4-ae5d-00059a3c7a00&amp;gt;;rel=&quot;http://purl.org/NET/linkrel/resource-not-found&quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;附录-B-备选方案，或者：为什么不加一个新的状态码？&quot;&gt;&lt;a href=&quot;#附录-B-备选方案，或者：为什么不加一个新的状态码？&quot; class=&quot;headerlink&quot; title=&quot;附录 B. 备选方案，或者：为什么不加一个新的状态码？&quot;&gt;&lt;/a&gt;附录 B. 备选方案，或者：为什么不加一个新的状态码？&lt;/h2&gt;&lt;p&gt;一种貌似合理的备选方法是在更高一级上实现这个功能，使用新的重定向状态码（参见 [RFC7231] 的 6.4 节）。然而，这将具有以下几个缺点：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;服务器需要知道客户端是否能够理解新的状态码；这样一些额外的标记加入该协议将是必不可少的。&lt;/li&gt;
&lt;li&gt;在重定向消息中，元数据的表现形式（[RFC7231]的 3.1 节），即“Content-Type”，适用于响应消息，而不适用于重定向到的资源。&lt;/li&gt;
&lt;li&gt;使用内容编码的原始保留性质将丢失。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;另一个选择是在媒体类型级别上使用类似“message/external-body”的某个类型来实现间接获取资源，该方法在 [RFC2017] 上定义并在 [RFC4483] 中被改进，在会话发起协议（SIP）中得到使用。但是这种方法具有与上面提到的状态码方法一样的大部分缺点。&lt;/p&gt;
&lt;h2 id=&quot;附录-C-开放议题&quot;&gt;&lt;a href=&quot;#附录-C-开放议题&quot; class=&quot;headerlink&quot; title=&quot;附录 C. 开放议题&quot;&gt;&lt;/a&gt;附录 C. 开放议题&lt;/h2&gt;&lt;h3 id=&quot;C-1-过早访问辅助资源&quot;&gt;&lt;a href=&quot;#C-1-过早访问辅助资源&quot; class=&quot;headerlink&quot; title=&quot;C.1 过早访问辅助资源&quot;&gt;&lt;/a&gt;C.1 过早访问辅助资源&lt;/h3&gt;&lt;p&gt;该协议的一个用例是使得系统可以启用“盲缓存”来提供辅助资源。这些缓存可能在需要时才填充,因此可能出现以下情况：无论填充缓存的机制是什么，当客户端命中该缓存的时候可能填充缓存的操作还没有完成（可能因为竞争条件，或者因为缓存位于一个不允许源服务器推送内容至其上的中间件的后面）。&lt;/p&gt;
&lt;p&gt;在这种特殊情况下，如果客户端能够“肩扛”主资源的回退 URI，给予辅助服务器一种可以获得有效载荷本身的方法，这将会是非常有用的。这些信息可以在另一个叫做“Link”的头字段中提供：&lt;/p&gt;
&lt;figure class=&quot;highlight http&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;GET&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;/bae27c36-fa6a-11e4-ae5d-00059a3c7a00&lt;/span&gt; HTTP/1.1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Host&lt;/span&gt;: example.net&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;attribute&quot;&gt;Link&lt;/span&gt;: &amp;lt;http://example.com/c/bae27c36-fa6a-11e4-ae5d-00059a3c7a00&amp;gt;;rel=&quot;http://purl.org/NET/linkrel/fallback-resource&quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;（继续 3.4.1 节的例子）&lt;/p&gt;
&lt;h3 id=&quot;C-2-资源映射&quot;&gt;&lt;a href=&quot;#C-2-资源映射&quot; class=&quot;headerlink&quot; title=&quot;C.2 资源映射&quot;&gt;&lt;/a&gt;C.2 资源映射&lt;/h3&gt;&lt;p&gt;当“带外”编码作为缓存解决方案的一部分时，到源服务器的额外往返可能产生重要的性能问题；特别是当许多小资源需要加载时（例如脚本，图像或视频片段）。在这样的情况下，源服务器提供一个“资源映射”，允许这些被映射的资源跳过到源服务器的往返行程将会非常有用。 发送资源映射的合理方式可以是：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;作为在“带外”编码 JSON 有效载荷中的扩展，或者&lt;/li&gt;
&lt;li&gt;作为由“Link”响应头字段标识的单独资源。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;本规范没有定义格式，也没有定义机制来传输该映射，但它是一些使用“带外”编码的规范将要做的。&lt;/p&gt;
&lt;h3 id=&quot;C-3-分段&quot;&gt;&lt;a href=&quot;#C-3-分段&quot; class=&quot;headerlink&quot; title=&quot;C.3 分段&quot;&gt;&lt;/a&gt;C.3 分段&lt;/h3&gt;&lt;p&gt;将原始资源的有效载荷分割为片段，每个片段映射到不同的辅助资源处将是很有趣的。 这将允许不在单个缓存中存储一个资源的所有有效载荷。因此&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;分配负载，&lt;/li&gt;
&lt;li&gt;使用不同的方式来缓存资源的不同部分（例如只分配一个长视频的开始几分钟），或&lt;/li&gt;
&lt;li&gt;获取资源的特定部分（类似于字节范围请求），或&lt;/li&gt;
&lt;li&gt;隐藏来自辅助服务器的信息。&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;C-4-与内容加密的关系&quot;&gt;&lt;a href=&quot;#C-4-与内容加密的关系&quot; class=&quot;headerlink&quot; title=&quot;C.4 与内容加密的关系&quot;&gt;&lt;/a&gt;C.4 与内容加密的关系&lt;/h3&gt;&lt;p&gt;现在该规范与[ENCRYPTENC]/[MICE]正交；也就是说，它可以用于诸如软件下载之类的公共内容。 然而，强制加密的缺乏影响了安全考虑。我们需要决定是否需要这种水平的独立性。&lt;/p&gt;
&lt;h3 id=&quot;C-5-报告&quot;&gt;&lt;a href=&quot;#C-5-报告&quot; class=&quot;headerlink&quot; title=&quot;C.5 报告&quot;&gt;&lt;/a&gt;C.5 报告&lt;/h3&gt;&lt;p&gt;这个规范已经定义了客户端在访问辅助资源失败时可以报告失败的钩子（参见附录 A）。&lt;/p&gt;
&lt;p&gt;但是，如果还有办法报告以下的数据，将是有益的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;成功（缓存命中）率，和&lt;/li&gt;
&lt;li&gt;到辅助服务器的带宽。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这可以通过使用新的服务端点和一个（JSON？）有效载荷格式来实现。&lt;/p&gt;
&lt;p&gt;类似地，由辅助服务器使用的报告设施也可能是有用的。&lt;/p&gt;
&lt;h3 id=&quot;C-6-控制各种请求报头字段的传输&quot;&gt;&lt;a href=&quot;#C-6-控制各种请求报头字段的传输&quot; class=&quot;headerlink&quot; title=&quot;C.6 控制各种请求报头字段的传输&quot;&gt;&lt;/a&gt;C.6 控制各种请求报头字段的传输&lt;/h3&gt;&lt;p&gt;默认情况下，客户端会将一些请求头字段例如“User-Agent“（或一些新定义的”Client Hints“）包含进他们向辅助服务器发送的请求。如果辅助服务器不执行任何内容协商，那么这些头字段实际上都没有用，所以在默认情况下禁止它们可能是一个减少识别的好主意。在这种情况下，我们可以允许源服务器选择发送它们其中的一部分。&lt;/p&gt;
&lt;h2 id=&quot;附录-D-修改日志（在发布前将被-RFC-编辑者移除）&quot;&gt;&lt;a href=&quot;#附录-D-修改日志（在发布前将被-RFC-编辑者移除）&quot; class=&quot;headerlink&quot; title=&quot;附录 D 修改日志（在发布前将被 RFC 编辑者移除）&quot;&gt;&lt;/a&gt;附录 D 修改日志（在发布前将被 RFC 编辑者移除）&lt;/h2&gt;&lt;h3 id=&quot;D-1-Changes-since-draft-reschke-http-oob-encoding-00&quot;&gt;&lt;a href=&quot;#D-1-Changes-since-draft-reschke-http-oob-encoding-00&quot; class=&quot;headerlink&quot; title=&quot;D.1.  Changes since draft-reschke-http-oob-encoding-00&quot;&gt;&lt;/a&gt;D.1.  Changes since draft-reschke-http-oob-encoding-00&lt;/h3&gt;&lt;p&gt;Mention media type approach.&lt;/p&gt;
&lt;p&gt;Explain that clients can always fall back not to use oob when the secondary resource isn’t available.&lt;/p&gt;
&lt;p&gt;Add Vary response header field to examples and mention that it’ll usually be needed (&lt;a href=&quot;https://github.com/reschke/oobencoding/issues/6&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/reschke/oobencoding/issues/6&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Experimentally add problem reporting using piggy-backed Link header fields (&lt;a href=&quot;https://github.com/reschke/oobencoding/issues/7&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/reschke/oobencoding/issues/7&lt;/a&gt;).&lt;/p&gt;
&lt;h3 id=&quot;D-2-Changes-since-draft-reschke-http-oob-encoding-01&quot;&gt;&lt;a href=&quot;#D-2-Changes-since-draft-reschke-http-oob-encoding-01&quot; class=&quot;headerlink&quot; title=&quot;D.2.  Changes since draft-reschke-http-oob-encoding-01&quot;&gt;&lt;/a&gt;D.2.  Changes since draft-reschke-http-oob-encoding-01&lt;/h3&gt;&lt;p&gt;Updated ENCRYPTENC reference.&lt;/p&gt;
&lt;h3 id=&quot;D-3-Changes-since-draft-reschke-http-oob-encoding-02&quot;&gt;&lt;a href=&quot;#D-3-Changes-since-draft-reschke-http-oob-encoding-02&quot; class=&quot;headerlink&quot; title=&quot;D.3.  Changes since draft-reschke-http-oob-encoding-02&quot;&gt;&lt;/a&gt;D.3.  Changes since draft-reschke-http-oob-encoding-02&lt;/h3&gt;&lt;p&gt;Add MICE reference.&lt;/p&gt;
&lt;p&gt;Remove the ability of the secondary resource to contain anything but the payload (&lt;a href=&quot;https://github.com/reschke/oobencoding/issues/11&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/reschke/oobencoding/issues/11&lt;/a&gt;).&lt;/p&gt;
&lt;p&gt;Changed JSON payload to be an object containing an array of URIs plus additional members.  Specify “fallback” as one of these additional members, and update Appendix C.1 accordingly).&lt;/p&gt;
&lt;p&gt;Discuss extensibility a bit.&lt;/p&gt;
&lt;h3 id=&quot;D-4-Changes-since-draft-reschke-http-oob-encoding-03&quot;&gt;&lt;a href=&quot;#D-4-Changes-since-draft-reschke-http-oob-encoding-03&quot; class=&quot;headerlink&quot; title=&quot;D.4.  Changes since draft-reschke-http-oob-encoding-03&quot;&gt;&lt;/a&gt;D.4.  Changes since draft-reschke-http-oob-encoding-03&lt;/h3&gt;&lt;p&gt;Mention “Content Stealing” thread.&lt;/p&gt;
&lt;p&gt;Mention padding.&lt;/p&gt;
&lt;h3 id=&quot;D-5-Changes-since-draft-reschke-http-oob-encoding-04&quot;&gt;&lt;a href=&quot;#D-5-Changes-since-draft-reschke-http-oob-encoding-04&quot; class=&quot;headerlink&quot; title=&quot;D.5.  Changes since draft-reschke-http-oob-encoding-04&quot;&gt;&lt;/a&gt;D.5.  Changes since draft-reschke-http-oob-encoding-04&lt;/h3&gt;&lt;p&gt;Reduce information leakage by disallowing ambient authority information being sent to the secondary resource.  Require “Origin” to be included in request to secondary resource, and require secondary server to check it.&lt;/p&gt;
&lt;p&gt;Mention “Origin” + server check on secondary resource as defense to content stealing.&lt;/p&gt;
&lt;p&gt;Update ENCRYPTENC reference, add SCD reference.&lt;/p&gt;
&lt;p&gt;Mention fragmentation feature.&lt;/p&gt;
&lt;p&gt;Discuss relation with range requests.&lt;/p&gt;
&lt;h3 id=&quot;D-6-Changes-since-draft-reschke-http-oob-encoding-05&quot;&gt;&lt;a href=&quot;#D-6-Changes-since-draft-reschke-http-oob-encoding-05&quot; class=&quot;headerlink&quot; title=&quot;D.6.  Changes since draft-reschke-http-oob-encoding-05&quot;&gt;&lt;/a&gt;D.6.  Changes since draft-reschke-http-oob-encoding-05&lt;/h3&gt;&lt;p&gt;Remove redundant Cache-Control: private from one example response (the response payload is encrypted anyway).&lt;/p&gt;
&lt;p&gt;Mention looping.&lt;/p&gt;
&lt;p&gt;Remove ‘metadata’ payload element.&lt;/p&gt;
&lt;p&gt;Align with changes in ENCRYPTENC spec.&lt;/p&gt;
&lt;p&gt;Fix incorrect statement about what kind of cookies/credentials can be used in the request to the secondary resource.&lt;/p&gt;
&lt;p&gt;Rename “URIs” to “sr” (“secondary resources”) and treat the fallback URI like a regular secondary resource.&lt;/p&gt;
&lt;p&gt;Mention reporting protocol ideas.&lt;/p&gt;
&lt;h3 id=&quot;D-7-Changes-since-draft-reschke-http-oob-encoding-06&quot;&gt;&lt;a href=&quot;#D-7-Changes-since-draft-reschke-http-oob-encoding-06&quot; class=&quot;headerlink&quot; title=&quot;D.7.  Changes since draft-reschke-http-oob-encoding-06&quot;&gt;&lt;/a&gt;D.7.  Changes since draft-reschke-http-oob-encoding-06&lt;/h3&gt;&lt;p&gt;Changed the link relation name to the fallback resource from “primary” to “fallback”.  Added link relation for reporting TLS handshake failures.&lt;/p&gt;
&lt;p&gt;Added an example about the interaction with ‘gzip’ coding.&lt;/p&gt;
&lt;p&gt;Update ENCRYPTENC, MICE, and SCD references.&lt;/p&gt;
&lt;h3 id=&quot;D-8-Changes-since-draft-reschke-http-oob-encoding-07&quot;&gt;&lt;a href=&quot;#D-8-Changes-since-draft-reschke-http-oob-encoding-07&quot; class=&quot;headerlink&quot; title=&quot;D.8.  Changes since draft-reschke-http-oob-encoding-07&quot;&gt;&lt;/a&gt;D.8.  Changes since draft-reschke-http-oob-encoding-07&lt;/h3&gt;&lt;p&gt;Restrict the valid media types for the response of the secondary server to “application/oob-stream”.&lt;/p&gt;
&lt;p&gt;Changed JSON format to allow annotation (optional flags) and entirely new types of entries.&lt;/p&gt;
&lt;h3 id=&quot;D-9-Changes-since-draft-reschke-http-oob-encoding-08&quot;&gt;&lt;a href=&quot;#D-9-Changes-since-draft-reschke-http-oob-encoding-08&quot; class=&quot;headerlink&quot; title=&quot;D.9.  Changes since draft-reschke-http-oob-encoding-08&quot;&gt;&lt;/a&gt;D.9.  Changes since draft-reschke-http-oob-encoding-08&lt;/h3&gt;&lt;p&gt;Moved error reporting into appendix (because it’s optional and we’re not sure about the utility of it).  See &lt;a href=&quot;https://github.com/EricssonResearch/Blind-Cache-Drafts/issues/4&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;https://github.com/EricssonResearch/Blind-Cache-Drafts/issues/4&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Updated references for ENCRYPTENC, MICE, and SCD.&lt;/p&gt;
&lt;p&gt;Mention that we could suppress certain request header fields in the request to the secondary server.&lt;/p&gt;
&lt;h2 id=&quot;附录-E-致谢&quot;&gt;&lt;a href=&quot;#附录-E-致谢&quot; class=&quot;headerlink&quot; title=&quot;附录 E 致谢&quot;&gt;&lt;/a&gt;附录 E 致谢&lt;/h2&gt;&lt;p&gt;Thanks to Christer Holmberg, Daniel Lindstrom, Erik Nygren, Goran Eriksson, John Mattsson, Kevin Smith, Magnus Westerlund, Mark Nottingham, Martin Thomson, and Roland Zink for feedback on this document. &lt;/p&gt;
&lt;p&gt;作者地址：&lt;br&gt;Julian F. Reschke&lt;br&gt;greenbytes GmbH&lt;br&gt;Hafenweg 16&lt;br&gt;Muenster, NW  48155&lt;br&gt;Germany&lt;/p&gt;
&lt;p&gt;EMail: julian.reschke@greenbytes.de&lt;br&gt;URI:   &lt;a href=&quot;http://greenbytes.de/tech/webdav/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://greenbytes.de/tech/webdav/&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;Salvatore Loreto&lt;br&gt;Ericsson&lt;br&gt;Torshamnsgatan 21&lt;br&gt;Stochholm  16483&lt;br&gt;Sweden&lt;/p&gt;
&lt;p&gt;EMail: salvatore.loreto@ericsson.com&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言&lt;/p&gt;
&lt;p&gt;这篇译文其实是高级计网课的作业，教授要求在 &lt;a href=&quot;ietf.org&quot;&gt;IETF&lt;/a&gt; 上找一篇尚未成为 RFC、也就是还处于草案状态的文档翻译一下。于是笔者随便搜了篇 HTTP 协议相关的文档。翻译完毕后感觉还是有
    
    </summary>
    
      <category term="理论学习" scheme="http://chriscindy.top/categories/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="HTTP" scheme="http://chriscindy.top/tags/HTTP/"/>
    
  </entry>
  
  <entry>
    <title>《CSS揭秘》读书总结：背景与边框</title>
    <link href="http://chriscindy.top/2016/11/01/%E3%80%8ACSS%E6%8F%AD%E7%A7%98%E3%80%8B%E8%AF%BB%E4%B9%A6%E6%80%BB%E7%BB%93%EF%BC%9A%E8%83%8C%E6%99%AF%E4%B8%8E%E8%BE%B9%E6%A1%86/"/>
    <id>http://chriscindy.top/2016/11/01/《CSS揭秘》读书总结：背景与边框/</id>
    <published>2016-11-01T11:25:15.000Z</published>
    <updated>2016-11-01T16:07:02.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;本系列是阅读《CSS揭秘》所作的总结，用以提高知识吸收程度。同时该书本身便是以解决 47 个 CSS 技巧而进行组织的，总结归纳后方便日后查找。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-半透明边框&quot;&gt;&lt;a href=&quot;#1-半透明边框&quot; class=&quot;headerlink&quot; title=&quot;1. 半透明边框&quot;&gt;&lt;/a&gt;1. 半透明边框&lt;/h2&gt;&lt;h3 id=&quot;难题&quot;&gt;&lt;a href=&quot;#难题&quot; class=&quot;headerlink&quot; title=&quot;难题&quot;&gt;&lt;/a&gt;难题&lt;/h3&gt;&lt;p&gt;在 CSS 中使用半透明颜色，可以使用 rgba() 和 hsla()。&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;HSL代表色相，饱和度和亮度 - 使用色彩圆柱坐标表示。&lt;br&gt;HSL颜色值指定：HSL（色调，饱和度，明度）。&lt;br&gt;色相是在色轮上的程度（从0到360）-0（或360）是红色的，120是绿色的，240是蓝色的。饱和度是一个百分比值;0％意味着灰色和100％的阴影，是全彩。亮度也是一个百分点;0％是黑色的，100％是白色的。&lt;/p&gt;
&lt;p&gt;HSLA的颜色值是一个带有alpha通道的HSL颜色值的延伸 - 指定对象的透明度。&lt;br&gt;指定HSLA颜色值：HSLA（色调，饱和度，亮度，α），α是Alpha参数定义的不透明度。 Alpha参数是一个介于0.0（完全透明）和1.0（完全不透明）之间的参数。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;尽管半透明颜色很受欢迎，但人们对其使用更多集中于背景上。&lt;/p&gt;
&lt;p&gt;假设我们想给一个容器设置一层白色背景和一道半透明白色边框，body 的背景会从它的半透明边框透上来。我们最开始的尝试可能是这样的：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;border&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;hsla&lt;/span&gt;(0,0%,100%,&lt;span class=&quot;selector-class&quot;&gt;.5&lt;/span&gt;); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;white&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;结果如下，边框不见了：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/801b780ajw1f94n0oxe5fj20dw0a0gmk.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;解决方案&quot;&gt;&lt;a href=&quot;#解决方案&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;p&gt;默认状态下，背景会延伸到边框的区域下层，结合下面绿色背景虚线边框的图比较好理解：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/801b780ajw1f94n53va1lj20e00biq32.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;这就可以解释我们遇到的难题：body 的背景并没有从内部 content 的半透明的白色半透明边框处透上来，而是在半透明白色边框处透出了这个容器自己的纯白实色背景，这实际上得到的效果跟纯白实色的边框看起来完全一样。&lt;/p&gt;
&lt;p&gt;如果要解决这个问题，可以使用 CSS 3 中的 background-clip 属性来进行调整。该属性初始值为 border-box，意味着背景会被元素的 border box（边框的外沿框）裁切掉，如果设置为 padding-box，这样浏览器就会用内边距的外沿来把背景裁切掉。&lt;/p&gt;
&lt;p&gt;我们修改代码如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;border&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;hsla&lt;/span&gt;(0,0%,100%,&lt;span class=&quot;selector-class&quot;&gt;.5&lt;/span&gt;); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;white&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-clip&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;padding-box&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/801b780ajw1f94nc0kc3aj20dq09cwfp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;h2 id=&quot;2-多重边框&quot;&gt;&lt;a href=&quot;#2-多重边框&quot; class=&quot;headerlink&quot; title=&quot;2.多重边框&quot;&gt;&lt;/a&gt;2.多重边框&lt;/h2&gt;&lt;h3 id=&quot;难题-1&quot;&gt;&lt;a href=&quot;#难题-1&quot; class=&quot;headerlink&quot; title=&quot;难题&quot;&gt;&lt;/a&gt;难题&lt;/h3&gt;&lt;p&gt;多重边框的实现很长时间内都需要各种丑陋的 hack，比如使用多个元素来模拟多重边框。在 CSS 代码层面对多重边框进行灵活的调整看起来非常困难。&lt;/p&gt;
&lt;h3 id=&quot;解决方案-1&quot;&gt;&lt;a href=&quot;#解决方案-1&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;box-shadow 方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;box-shadow 可以接受 6 个参数，如下表所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tNc79gw1f9d1yvo82tj318m0gcmzm.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当我们将 spread 属性设为正值，h-shadow、v-shadow 和 blur 均设置为 0，得到的“投影”就像一道实线边框：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;yellowgreen&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;box-shadow&lt;/span&gt; : 0 0 0 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#655&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/801b780ajw1f94klzchvxj20dq09kjrg.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用 border 也可以实现同样的效果，但 box-shadow 的优势在于：它支持逗号分隔语法，这意味着其可以创建任意数量的投影，所以也就可以创建任意数量的边框。这里在上面的基础上添加一道边框：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;yellowgreen&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;box-shadow&lt;/span&gt;: 0 0 0 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#655&lt;/span&gt;, 0 0 0 15&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;deeppink&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/801b780ajw1f94kvxnctlj20ek0ag0sz.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;有一处需要注意，box-shadow 是层层叠加的，因此需要按此规律调整 spread 值。比如，上面第一层边框的 spread 值为 10 px，则宽度为 10 px；如果第二层边框的宽度需要设置为 5px，则第二个 box-shadow 的spread 值需要设置为 （10 + 5）即 15 px。&lt;/p&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;投影的行为跟边框不完全一致，因为它不会影响布局，而且也不会受到 box-sizing 属性的影响。如有需要，可以通过内边距或外边距（这取决于投影是内嵌还是外扩的）来额外模拟出边框所需要占据的空间。&lt;/li&gt;
&lt;li&gt;使用 box-shadow 创建的边框，其不会响应鼠标事件， 比如悬停或点击。如果需要使其响应鼠标事件，则可以添加 &lt;strong&gt;inset&lt;/strong&gt; 关键字，使得 box-shadow 创建的边框出现在内圈，然后留出额外的内边距来填补这些空隙。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;outline 方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;此方案适用于只创建两层边框的情况。第一层边框使用 border 属性创建，第二层边框使用 outline 属性创建。该方案非常灵活。先看一下 outline 属性可以接受的参数：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79gw1f9d201qpovj318e0csq4v.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;对于上面用 box-shadow 实现的两层边框，用 outline 实现的方式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;yellowgreen&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;border&lt;/span&gt; : 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#655&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;outline&lt;/span&gt; : 5&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;deeppink&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;outline 可以和 outline-offset 配合使用，后者用来控制 outline 和元素边缘之间的距离，该属性可以接受负值，对一层 dashed （虚线）outline 使用负的 outline-offset 后，可以得到简单的缝边效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/801b780ajw1f94lm2dme1j20dm09cwem.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;outline 只适用于双层边框&lt;/li&gt;
&lt;li&gt;outline 边框不一定会贴合 border-radius 属性产生的圆角。这种行为被 CSS 工作组认为是一个 bug，因此未来可能会改为贴合 border- radius 圆角。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;3-灵活的背景定位&quot;&gt;&lt;a href=&quot;#3-灵活的背景定位&quot; class=&quot;headerlink&quot; title=&quot;3. 灵活的背景定位&quot;&gt;&lt;/a&gt;3. 灵活的背景定位&lt;/h2&gt;&lt;h3 id=&quot;难题-2&quot;&gt;&lt;a href=&quot;#难题-2&quot; class=&quot;headerlink&quot; title=&quot;难题&quot;&gt;&lt;/a&gt;难题&lt;/h3&gt;&lt;p&gt;要求针对容器某个角对背景图片做偏移定位，如右下角。在 CSS 2.1 中，只能指定距离左上角的偏移量，或者靠齐到其他三个角。但是如果希望图片和容器的边角之间能留出一定的空隙，此时便比较难解决。&lt;/p&gt;
&lt;h3 id=&quot;解决方案-2&quot;&gt;&lt;a href=&quot;#解决方案-2&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;传统方法&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;对于固定尺寸的容器，可以基于它自身的尺寸以及我们期望它距离右下角的偏移量，计 算出背景图片距离左上角的偏移量，然后再把计算结果设置给 background- position 。&lt;/li&gt;
&lt;li&gt;对于尺寸不固定的容器，上述方案无效。&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;background-position 的扩展语法方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;background-position 在 CSS 3 中得到扩展，其允许我们指定背景图片距离任意角的偏移量，只要我们在偏移量前指定关键字，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;code-pirate&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.svg&lt;/span&gt;) &lt;span class=&quot;selector-tag&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-position&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;right&lt;/span&gt; 20&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;bottom&lt;/span&gt; 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码表示让背景图片跟右边缘保持 20 px 的偏移量，同时跟底边保持 10px 的偏移量。&lt;/p&gt;
&lt;p&gt;对于不支持 background-position 扩展的浏览器，应该为其提供回退方案，在 background 中指定老式的 &lt;code&gt;right bottom&lt;/code&gt; 简写值：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;url&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;code-pirate&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.svg&lt;/span&gt;) &lt;span class=&quot;selector-tag&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;bottom&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;right&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-position&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;right&lt;/span&gt; 20&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;bottom&lt;/span&gt; 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;background-origin 方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;对于 &lt;code&gt;background-position: top left&lt;/code&gt; 这样的代码，这里的 &lt;code&gt;top left&lt;/code&gt; 是相对于元素的 padding box 的左上角。现在我们使用 CSS 3 新增的 background-origin 属性可以指定矩形框是 content-box、padding-box 还是 border-box。比如：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;padding&lt;/span&gt;: 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;url&lt;/span&gt;(&quot;&lt;span class=&quot;selector-tag&quot;&gt;code-pirate&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.svg&lt;/span&gt;&quot;) &lt;span class=&quot;selector-tag&quot;&gt;no-repeat&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;bottom&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;right&lt;/span&gt;; &lt;span class=&quot;comment&quot;&gt;/* 或 100% 100% */&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-origin&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;content-box&lt;/span&gt; ;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当设置 background-origin 为 content-box 时，background-position 属性中使用的边角关键字将会以内容区的边缘作为基准（也就是说，此时背景图片距离边角的偏移量就跟内边距保持一致了）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;calc() 方案&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;直接上代码：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;url&lt;/span&gt;(&quot;&lt;span class=&quot;selector-tag&quot;&gt;code-pirate&lt;/span&gt;&lt;span class=&quot;selector-class&quot;&gt;.svg&lt;/span&gt;&quot;) &lt;span class=&quot;selector-tag&quot;&gt;no-repeat&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-position&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;calc&lt;/span&gt;(100% &lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; 20&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;) &lt;span class=&quot;selector-tag&quot;&gt;calc&lt;/span&gt;(100% &lt;span class=&quot;selector-tag&quot;&gt;-&lt;/span&gt; 10&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;以上代码的效果也是让背景图片跟右边缘保持 20 px 的偏移量，同时跟底边保持 10px 的偏移量。&lt;/p&gt;
&lt;p&gt;注：在 calc() 函数内部的 - 和 + 运算符的两侧各加 一个空白符，否则会产生解析错误。此举是为了向前兼容：    未来，在 calc() 内部可能会允许使用关键字， 而这些关键字可能会包含连字符（即减号）。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;4-边框内圆角&quot;&gt;&lt;a href=&quot;#4-边框内圆角&quot; class=&quot;headerlink&quot; title=&quot;4. 边框内圆角&quot;&gt;&lt;/a&gt;4. 边框内圆角&lt;/h2&gt;&lt;h3 id=&quot;难题-3&quot;&gt;&lt;a href=&quot;#难题-3&quot; class=&quot;headerlink&quot; title=&quot;难题&quot;&gt;&lt;/a&gt;难题&lt;/h3&gt;&lt;p&gt;有时我们需要一个容器，只在内侧有圆角，而边框或描边的四个角在外 部仍然保持直角的形状，如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/801b780ajw1f94ntx5uk5j20e6066aac.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;使用两个元素可以实现上述效果，并且很简单：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;class&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;something-meaningful&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt; I have a nice subtle inner rounding, don&#39;t I look pretty? &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;div&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.something-meaningful&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;background &lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;#655&lt;/span&gt;; &lt;span class=&quot;attribute&quot;&gt;padding &lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;8em&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-class&quot;&gt;.something-meaningful&lt;/span&gt; &amp;gt; &lt;span class=&quot;selector-tag&quot;&gt;div&lt;/span&gt; &amp;#123; &lt;span class=&quot;attribute&quot;&gt;background &lt;/span&gt;: tan; &lt;span class=&quot;attribute&quot;&gt;border-radius &lt;/span&gt;: .&lt;span class=&quot;number&quot;&gt;8em&lt;/span&gt;; &lt;span class=&quot;attribute&quot;&gt;padding &lt;/span&gt;: &lt;span class=&quot;number&quot;&gt;1em&lt;/span&gt;; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;但是如果要求用一个元素实现呢？&lt;/p&gt;
&lt;h3 id=&quot;解决方案-3&quot;&gt;&lt;a href=&quot;#解决方案-3&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;tan&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;border-radius&lt;/span&gt; : &lt;span class=&quot;selector-class&quot;&gt;.8em&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;padding&lt;/span&gt;: 1&lt;span class=&quot;selector-tag&quot;&gt;em&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;box-shadow&lt;/span&gt; : 0 0 0 &lt;span class=&quot;selector-class&quot;&gt;.6em&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#655&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;outline&lt;/span&gt; : &lt;span class=&quot;selector-class&quot;&gt;.6em&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;solid&lt;/span&gt; &lt;span class=&quot;selector-id&quot;&gt;#655&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其效果和上面两个元素实现的效果一样。究其原因，正如多重边框一节对 outline 属性介绍时提到的，其并不会贴合 border-radius 属性产生的圆角，但是 box-shadow 会。二者叠加到一起，box-shadow 会刚好填补描边和容器圆角之间的空隙。以下两张图分别是单独使用 outline 和 box-shadow 属性的效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/801b780ajw1f94ojbd7huj20e80743yx.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/801b780ajw1f94ojk8syzj20e607kaah.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;我们为 box-shadow 属性指定的扩张值并不一定等于描边的宽度，我们只需要指定一个足够填补“空隙”的扩张值就可以了。这个值具体是多少？看下图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/801b780ajw1f94oz5uwlcj20f809yweo.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;当圆角半径为 r 时，从圆角的圆心到描边顶角的长度就是 r√2，这意味着投影的扩张半径 spread 值不能小于 r√2 - r = (√2 - 1)r。同时，该值还需要比描边的宽度值小。&lt;/p&gt;
&lt;h2 id=&quot;5-条纹背景&quot;&gt;&lt;a href=&quot;#5-条纹背景&quot; class=&quot;headerlink&quot; title=&quot;5. 条纹背景&quot;&gt;&lt;/a&gt;5. 条纹背景&lt;/h2&gt;&lt;h3 id=&quot;难题-4&quot;&gt;&lt;a href=&quot;#难题-4&quot; class=&quot;headerlink&quot; title=&quot;难题&quot;&gt;&lt;/a&gt;难题&lt;/h3&gt;&lt;p&gt;目前在网页中实现条纹图案的方式非常繁琐，并且效果往往不够理想。&lt;/p&gt;
&lt;h3 id=&quot;解决方案-4&quot;&gt;&lt;a href=&quot;#解决方案-4&quot; class=&quot;headerlink&quot; title=&quot;解决方案&quot;&gt;&lt;/a&gt;解决方案&lt;/h3&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;水平条纹&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;使用 linear-gradient 属性可以创建基本的垂直渐变，比如：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;下图一&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;下图二&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 20%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 80%);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;下图三&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 40%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 60%);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对应效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/801b780ajw1f94scfkualj20dk08u0su.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww2.sinaimg.cn/large/801b780ajw1f94sg2c376j20dw0943yp.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/801b780ajw1f94sg9qvibj20dk094t8u.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以发现，当拉近两个色标时，渐变区域越来越窄。不难想象，如果把两个色标重合在一起，得到的就是两条水平条纹。以下是理论依据：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“如果多个色标具有相同的位置，它们会产生一个无限小的过渡区域， 过渡的起止色分别是第一个和最后一个指定值。从效果上看，颜色会在那 个位置突然变化，而不是一个平滑的渐变过程。”&lt;/p&gt;
&lt;p&gt;——CSS 图像（第三版）（&lt;a href=&quot;http://w3.org/TR/css3-images）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://w3.org/TR/css3-images）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 50%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 50%);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对应效果：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/801b780ajw1f94sknha8dj20dm08s74b.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;在此基础上，我们可以进行一些再加工：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;可以通过&lt;span class=&quot;selector-tag&quot;&gt;background-size&lt;/span&gt;来调整尺寸&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;背景默认重复平铺，所以整个容器被两条条纹填满&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;如下图一&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 50%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 50%); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-size&lt;/span&gt; : 100% 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;还可以用相同的方法来创建不等宽的条纹，只需调整色标的位置值即可&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;!&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;如下图二&lt;span class=&quot;selector-tag&quot;&gt;--&lt;/span&gt;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 30%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 30%); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-size&lt;/span&gt; : 100% 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/801b780ajw1f94ss8p4c1j20dq08w3yq.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/801b780ajw1f94ssfxyxkj20di09eaaa.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;针对上面的代码，还可以有改进方案，理论依据如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;“如果某个色标的位置值比整个列表中在它之前的色标的位置值都要 小，则该色标的位置值会被设置为它前面所有色标位置值的最大值。”&lt;/p&gt;
&lt;p&gt;——CSS 图像（第三版）（&lt;a href=&quot;http://w3.org/TR/css3-images）&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;http://w3.org/TR/css3-images）&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所以，如果我们把第二个色标的位置值设置为 0，那它的位置就总是会被浏览器调整为前一个色标的位置值。我们可以把原先这样的代码&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 30%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 30%);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;改写成这样：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 30%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 0);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果要创建超过两条颜色的条纹，也很容易。以下是生成三条条纹的代码：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 33&lt;span class=&quot;selector-class&quot;&gt;.3&lt;/span&gt;%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 0, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 66&lt;span class=&quot;selector-class&quot;&gt;.6&lt;/span&gt;%, &lt;span class=&quot;selector-tag&quot;&gt;yellowgreen&lt;/span&gt; 0); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-size&lt;/span&gt; : 100% 45&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;垂直条纹&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;垂直条纹相比水平条纹，在 linear-gradient 的开头加一个额外参数来标记其渐变方向即可（在水平条纹中我们没有加这个参数，因为其默认值就是 to bottom，也就是水平条纹的效果）：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(&lt;span class=&quot;selector-tag&quot;&gt;to&lt;/span&gt; &lt;span class=&quot;selector-tag&quot;&gt;right&lt;/span&gt;, &lt;span class=&quot;comment&quot;&gt;/* 或 90deg */&lt;/span&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 50%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 0); &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-size&lt;/span&gt; : 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; 100%;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;还需要把 background-size 的值颠倒。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;斜向条纹&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;如果按照常规思维，要实现斜向条纹，改变 linear-gradient 的方向和 background-size 的值，貌似就可以搞定。如果要实现一个 45° 的条纹图案，代码这样写：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(45&lt;span class=&quot;selector-tag&quot;&gt;deg&lt;/span&gt;,&lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 50%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 0);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-size&lt;/span&gt; : 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;得到的效果却是：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/801b780ajw1f95onvh71lj20ea09adgd.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;失败的原因是我们仅仅把每个背景单元作了渐变旋转，而没有站在背景整体的角度来看问题。来看预想的斜向背景的单个背景单元：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/801b780ajw1f95oq87kaaj20do0980th.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;可以看到，在一个背景单元里，实际上有四条条纹，这样就可以实现条纹无缝衔接：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(45&lt;span class=&quot;selector-tag&quot;&gt;deg&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 25%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 0, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 50%, &lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 0, &lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 75%, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 0); &lt;span class=&quot;selector-tag&quot;&gt;background-size&lt;/span&gt; : 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt; 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;关于条纹变成斜向后为何会看起来变瘦了，实际上是因为背景尺寸设置为 30px 时，产生的条纹宽度将是15/√2  ≈ 10.606 像素。如果需要和原先水平或垂直条纹一样的宽度，在其基础上乘以 √2 即可。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;更好的斜向条纹&lt;/strong&gt;&lt;/p&gt;
&lt;p&gt;上面的方案在我们想调整斜向角度时会非常不灵活。这里提供一个更好的方案。首先需要了解的是 linear-gradient() 和 radial-gradient() 各还有一个循环式的加强版：repeating-linear-gradient() 和 repeating-radial-gradient()。其工作方式和前两者类似，只有一点不同：色标是无限循环重复的，直到填满整个背景。比如以下代码：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;repeating-linear-gradient&lt;/span&gt;(45&lt;span class=&quot;selector-tag&quot;&gt;deg&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实相当于：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt;: &lt;span class=&quot;selector-tag&quot;&gt;linear-gradient&lt;/span&gt;(45&lt;span class=&quot;selector-tag&quot;&gt;deg&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 60&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 60&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 90&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 90&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 120&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 120&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 150&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, ...);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;效果图如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79jw1f9cqg35mh9j30da08qjrt.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;第一个好处就是减少了重复，改动颜色时只需要修改两处。另外一点就是现在是在渐变的色标中指定长度，而不是原来的 background-size。因为这些长度是直接在渐变轴上进行度量的，直接代表了条 纹自身的宽度。所以再也不用进行各种数学计算了。&lt;/p&gt;
&lt;p&gt;当需要改变角度为 60° 时，只需要这样：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;repeating-linear-gradient&lt;/span&gt;(60&lt;span class=&quot;selector-tag&quot;&gt;deg&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#fb3&lt;/span&gt; 15&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 0, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ol&gt;
&lt;li&gt;&lt;strong&gt;灵活的同色系条纹&lt;/strong&gt;&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;当条纹图案由差异不大的颜色组成时，按照上面提供的方法，我们可能需要这样写 CSS：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;repeating-linear-gradient&lt;/span&gt;(30&lt;span class=&quot;selector-tag&quot;&gt;deg&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#79b&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#79b&lt;/span&gt; 15&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 0, &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt; 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如图：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNc79jw1f9cqtt8kxuj30dm080dfu.jpg&quot; alt=&quot;&quot;&gt;&lt;/p&gt;
&lt;p&gt;实际上，在应对这种情况时，我们可以把最深的颜色指定为背景色，同时把半透明白色的条纹叠加在背景色之上来得到浅色条纹：&lt;/p&gt;
&lt;figure class=&quot;highlight css&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background&lt;/span&gt; : &lt;span class=&quot;selector-id&quot;&gt;#58a&lt;/span&gt;; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;selector-tag&quot;&gt;background-image&lt;/span&gt; : &lt;span class=&quot;selector-tag&quot;&gt;repeating-linear-gradient&lt;/span&gt;(30&lt;span class=&quot;selector-tag&quot;&gt;deg&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;hsla&lt;/span&gt;(0,0%,100%,&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;), &lt;span class=&quot;selector-tag&quot;&gt;hsla&lt;/span&gt;(0,0%,100%,&lt;span class=&quot;selector-class&quot;&gt;.1&lt;/span&gt;)    15&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;, &lt;span class=&quot;selector-tag&quot;&gt;transparent&lt;/span&gt; 0, &lt;span class=&quot;selector-tag&quot;&gt;transparent&lt;/span&gt; 30&lt;span class=&quot;selector-tag&quot;&gt;px&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;6-复杂的背景图案&quot;&gt;&lt;a href=&quot;#6-复杂的背景图案&quot; class=&quot;headerlink&quot; title=&quot;6. 复杂的背景图案&quot;&gt;&lt;/a&gt;6. 复杂的背景图案&lt;/h2&gt;&lt;h2 id=&quot;7-伪随机背景&quot;&gt;&lt;a href=&quot;#7-伪随机背景&quot; class=&quot;headerlink&quot; title=&quot;7. 伪随机背景&quot;&gt;&lt;/a&gt;7. 伪随机背景&lt;/h2&gt;&lt;h2 id=&quot;8-连续的图像边框&quot;&gt;&lt;a href=&quot;#8-连续的图像边框&quot; class=&quot;headerlink&quot; title=&quot;8. 连续的图像边框&quot;&gt;&lt;/a&gt;8. 连续的图像边框&lt;/h2&gt;&lt;p&gt;请支持正版，购买书籍自行查看。&lt;/p&gt;
&lt;p&gt;好吧，其实是我觉得这三章内容 focus 的点太小了，感觉了解一下即可。&lt;/p&gt;
&lt;p&gt;好吧，其实是我懒得截图整理了，加上确实 focus 的点太小了，所以就偷个懒啦。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;前言:&lt;br&gt;本系列是阅读《CSS揭秘》所作的总结，用以提高知识吸收程度。同时该书本身便是以解决 47 个 CSS 技巧而进行组织的，总结归纳后方便日后查找。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-半透明边框&quot;&gt;&lt;a href=&quot;
    
    </summary>
    
      <category term="读书笔记" scheme="http://chriscindy.top/categories/%E8%AF%BB%E4%B9%A6%E7%AC%94%E8%AE%B0/"/>
    
    
      <category term="CSS" scheme="http://chriscindy.top/tags/CSS/"/>
    
  </entry>
  
  <entry>
    <title>微信小程序的出现给前端带来了什么</title>
    <link href="http://chriscindy.top/2016/09/22/%E5%BE%AE%E4%BF%A1%E5%B0%8F%E7%A8%8B%E5%BA%8F%E7%9A%84%E5%87%BA%E7%8E%B0%E7%BB%99%E5%89%8D%E7%AB%AF%E5%B8%A6%E6%9D%A5%E4%BA%86%E4%BB%80%E4%B9%88/"/>
    <id>http://chriscindy.top/2016/09/22/微信小程序的出现给前端带来了什么/</id>
    <published>2016-09-22T09:39:49.000Z</published>
    <updated>2016-09-23T02:44:59.000Z</updated>
    
    <content type="html">&lt;p&gt;这是一个前端飞速发展的时代，我比较喜欢将其类比为欧洲列强疯狂殖民扩张的那段历史。JavaScript，得益于所有平台都必须具有浏览器这一特点，已经成为了事实上目前唯一的横跨所有平台的全能语言。现如今，前端圈仍然群雄割据，各种新框架和新概念层出不穷，你方唱罢我登场，而关于前端到底应该以怎么样的形式前进，虽然一些比较基本的观点比如组件化开发、去 DOM 操作等大体达成了一致，但整个大方向到如今依然没有定论。&lt;/p&gt;
&lt;p&gt;而在这之外，更值得引起注意的是，前端，确切的说是 Web 开发正在反噬到其他开发领域：Electron 瞄准了桌面客户端、Node.js 是服务端的后起之秀、React Native / Weex 则志在原生移动客户端，而 WebGL 则使得 JS 在刚刚兴起的 VR 领域有了立足之地……&lt;/p&gt;
&lt;p&gt;这两天刷屏的微信小程序，体现了腾讯将微信打造成一个超级操作系统的野心，客观上也加剧了 JS 技术栈对于 Native 客户端开发的入侵。前端工程师大喜，因为身价又要涨了，而 iOS / Android 工程师可能略微有点脊背发凉。其实，各种计算机技术或者说语言的兴起与衰落都只是一时的，又有谁能始终屹立在浪潮之巅呢？曾经 iOS 开发的御用语言 Objective C 在 Swift 推出后隐隐有了式微之势，而曾经被视为只能写写特效的玩具语言 JavaScript 现在却风头正劲，俗话说，时势造英雄。放在计算机的世界里，也可以说是时势造语言，或者时势造技术。&lt;/p&gt;
&lt;p&gt;所以，作为程序员，更应该多学一些技术，所谓技多不压身。只在一个方向上钻牛角尖固然可能取得较高造诣，然而万一风向变了，依靠一个人的力量逆势而为是收益非常低的事情。就像我一直认为的，小公司将自己的产品依附于大公司的平台上是很愚蠢的，因为指不住哪一天大公司就挂了，或者莫名其妙就把你给潜规则了。最好的规避风险的办法就是全平台发展，Web 端、客户端、微信公众平台（以及其他各种乱七八糟的平台比如支付宝服务窗等等等等）一个都不要落下。这对程序员来说一样适用。计算机发展到如今分支太过庞大，样样精通不现实，但至少应该在精通一到两个方向的基础上再多多涉猎其他领域，不仅是对开拓自己视野有帮助，更重要的是，当行业剧变来临时，你能够全身而退。&lt;/p&gt;
&lt;p&gt;前端工程师也一样，因为没准哪天，就有另一种技术来革了我们的命。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;这是一个前端飞速发展的时代，我比较喜欢将其类比为欧洲列强疯狂殖民扩张的那段历史。JavaScript，得益于所有平台都必须具有浏览器这一特点，已经成为了事实上目前唯一的横跨所有平台的全能语言。现如今，前端圈仍然群雄割据，各种新框架和新概念层出不穷，你方唱罢我登场，而关于前端
    
    </summary>
    
      <category term="技术感悟" scheme="http://chriscindy.top/categories/%E6%8A%80%E6%9C%AF%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="JavaScript" scheme="http://chriscindy.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>JavaScript 中 this 的四条绑定规则</title>
    <link href="http://chriscindy.top/2016/09/15/JavaScript-%E4%B8%AD-this-%E7%9A%84%E5%9B%9B%E6%9D%A1%E7%BB%91%E5%AE%9A%E8%A7%84%E5%88%99/"/>
    <id>http://chriscindy.top/2016/09/15/JavaScript-中-this-的四条绑定规则/</id>
    <published>2016-09-15T08:17:44.000Z</published>
    <updated>2016-09-18T09:09:17.000Z</updated>
    
    <content type="html">&lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;ES5 及之前时代的 JavaScript 中 &lt;code&gt;this&lt;/code&gt; 的绑定机制是让很多开发者头疼不已的事情。&lt;code&gt;this&lt;/code&gt; 的绑定变化多端，让笔者也吃了不少亏。本文根据《你不知道的 JavaScript》上卷中的内容总结了 &lt;code&gt;this&lt;/code&gt; 的四条绑定规则，在此记录，以防遗忘。&lt;/p&gt;
&lt;h1 id=&quot;绑定规则&quot;&gt;&lt;a href=&quot;#绑定规则&quot; class=&quot;headerlink&quot; title=&quot;绑定规则&quot;&gt;&lt;/a&gt;绑定规则&lt;/h1&gt;&lt;h2 id=&quot;1-默认绑定&quot;&gt;&lt;a href=&quot;#1-默认绑定&quot; class=&quot;headerlink&quot; title=&quot;1. 默认绑定&quot;&gt;&lt;/a&gt;1. 默认绑定&lt;/h2&gt;&lt;p&gt;独立函数调用时，&lt;code&gt;this&lt;/code&gt; 指向全局对象，如果使用严格模式，那么全局对象无法使用默认绑定， &lt;code&gt;this&lt;/code&gt;绑定至 &lt;code&gt;undefined&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo();  &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;严格模式时：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;  &quot;use strict&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;,log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo();  &lt;span class=&quot;comment&quot;&gt;// TypeError: this is undefined&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;2-隐式绑定&quot;&gt;&lt;a href=&quot;#2-隐式绑定&quot; class=&quot;headerlink&quot; title=&quot;2. 隐式绑定&quot;&gt;&lt;/a&gt;2. 隐式绑定&lt;/h2&gt;&lt;p&gt;当函数引用有上下文对象时（即函数作为引用属性被添加到对象中），隐式绑定规则会把函数调用中的 &lt;code&gt;this&lt;/code&gt; 绑定到这个上下文对象。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  a: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  foo: foo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;obj.foo();  &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;对象属性引用链中只有最顶层或者说最后一层会影响调用位置：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;obj1.obj2.foo();  &lt;span class=&quot;comment&quot;&gt;// foo 中的 this 与 obj2 绑定&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;2-1-隐式丢失&quot;&gt;&lt;a href=&quot;#2-1-隐式丢失&quot; class=&quot;headerlink&quot; title=&quot;2.1 隐式丢失&quot;&gt;&lt;/a&gt;2.1 隐式丢失&lt;/h3&gt;&lt;p&gt;隐式丢失指的是函数中的 &lt;code&gt;this&lt;/code&gt; 丢失绑定对象，即它会应用第 1 条的默认绑定规则，从而将 &lt;code&gt;this&lt;/code&gt; 绑定到全局对象或者 &lt;code&gt;undefined&lt;/code&gt; 上，取决于是否在严格模式下运行。以下情况会发生隐式丢失：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;绑定至上下文对象的函数被赋值给一个新的函数，然后调用这个新的函数时：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  a: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  foo: foo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = obj.foo; &lt;span class=&quot;comment&quot;&gt;//函数别名&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&quot;这是全局变量喔&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bar();  &lt;span class=&quot;comment&quot;&gt;// &quot;这是全局变量喔&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;传入回调函数时：&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;doFoo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;fn&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  fn();  &lt;span class=&quot;comment&quot;&gt;// &amp;lt;-- 调用位置&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  a: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  foo: foo&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;string&quot;&gt;&quot;这是全局变量喔&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;doFoo( obj.foo );  &lt;span class=&quot;comment&quot;&gt;// &quot;这是全局变量喔&quot;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;其实这就是第一种情况的变种，实际上参数传递就是一种隐式赋值。除了开发人员自定义的函数，在将函数传入语言内置的函数比如 &lt;code&gt;setTimeout&lt;/code&gt; 时，同样会发生隐式丢失的情况。&lt;/p&gt;
&lt;h2 id=&quot;3-显式绑定&quot;&gt;&lt;a href=&quot;#3-显式绑定&quot; class=&quot;headerlink&quot; title=&quot;3. 显式绑定&quot;&gt;&lt;/a&gt;3. 显式绑定&lt;/h2&gt;&lt;p&gt;显式绑定的核心是 JavaScript 内置的 &lt;code&gt;call(..)&lt;/code&gt; 和 &lt;code&gt;apply(..)&lt;/code&gt; 方法，这两个方法在 JavaScript 提供的绝大多数函数以及开发者自己创建的所有函数上都可以使用。&lt;/p&gt;
&lt;p&gt;&lt;code&gt;call(..)&lt;/code&gt; 和 &lt;code&gt;apply(..)&lt;/code&gt;的第一个参数是一个对象（二者区别在后面传入的参数形式，这里不是重点，不讨论），他们会将 &lt;code&gt;this&lt;/code&gt; 绑定到这个对象上。因为你可以直接指定 &lt;code&gt;this&lt;/code&gt; 绑定的对象，所以这条规则被称为显式绑定。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  a: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;foo.call(obj);  &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如果 &lt;code&gt;call&lt;/code&gt; 或者 &lt;code&gt;apply&lt;/code&gt; 传入的第一个参数是原始值（字符串类型、布尔类型或者数字类型），那么该原始值会被转换成它的对象形式（new String()、new Boolean() 或 new Number()），俗称“装箱”。&lt;/p&gt;
&lt;p&gt;显式绑定仍然无法解决丢失绑定问题。&lt;/p&gt;
&lt;h3 id=&quot;3-1-硬绑定&quot;&gt;&lt;a href=&quot;#3-1-硬绑定&quot; class=&quot;headerlink&quot; title=&quot;3.1 硬绑定&quot;&gt;&lt;/a&gt;3.1 硬绑定&lt;/h3&gt;&lt;p&gt;作为显式绑定的一个变种，硬绑定可以解决丢失绑定问题。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  a: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  foo.call(obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bar();  &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;setTimeout(bar, &lt;span class=&quot;number&quot;&gt;100&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;bar.call(&lt;span class=&quot;built_in&quot;&gt;window&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;//无效，硬绑定的 bar 不会再修改它的 this&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;在一个新的函数内部强制绑定 this 到某个对象上，无论之后如何调用这个新的函数，其 &lt;code&gt;this&lt;/code&gt; 都不会丢失。&lt;/p&gt;
&lt;p&gt;典型应用场景为创建一个包裹函数，传入所有的参数并返回接收到的所有值：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;something&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a, something);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a + something;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  a:&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; foo.call(obj, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = bar(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// 2 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b);  &lt;span class=&quot;comment&quot;&gt;// 5&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;或者将绑定的对象改为可配置，这样就成了一个辅助绑定函数：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;function bind(fn, obj)&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; fn.apply(obj, &lt;span class=&quot;built_in&quot;&gt;arguments&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;...&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;由于硬绑定实在太过常见，所以 ES5 提供了内置的 Function.prototype.bind，其用法如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;something&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a, something);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a + something;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  a: &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = foo.bind(obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; b = bar(&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;);  &lt;span class=&quot;comment&quot;&gt;// 2 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(b);  &lt;span class=&quot;comment&quot;&gt;// 5&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;3-2-API-调用的“上下文”&quot;&gt;&lt;a href=&quot;#3-2-API-调用的“上下文”&quot; class=&quot;headerlink&quot; title=&quot;3.2 API 调用的“上下文”&quot;&gt;&lt;/a&gt;3.2 API 调用的“上下文”&lt;/h3&gt;&lt;p&gt;JavaScript 自身以及许多第三方库的函数都提供了一个可选的参数，通常被称为“上下文”，其作用和 &lt;code&gt;bind(..)&lt;/code&gt; 一样，确保回调函数使用指定的 &lt;code&gt;this&lt;/code&gt;。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;el&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( el, &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.id);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; obj = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  id: &lt;span class=&quot;string&quot;&gt;&quot;awsome&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//调用 foo(..) 时把 this 绑定到 obj&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;[&lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;,&lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;].forEach(foo, obj);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 1 awsome 2 awsome 3 awsome&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实际上这些函数背后还是调用了 &lt;code&gt;call()&lt;/code&gt; 或者 &lt;code&gt;apply()&lt;/code&gt; ，只不过这样开发者需要写的代码就少了一些。&lt;/p&gt;
&lt;h2 id=&quot;4-new-绑定&quot;&gt;&lt;a href=&quot;#4-new-绑定&quot; class=&quot;headerlink&quot; title=&quot;4. new 绑定&quot;&gt;&lt;/a&gt;4. new 绑定&lt;/h2&gt;&lt;p&gt;使用 &lt;code&gt;new&lt;/code&gt; 来调用函数时，会自动执行下面的操作：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建一个全新的对象&lt;/li&gt;
&lt;li&gt;这个新对象会被执行 [[原型]] 连接&lt;/li&gt;
&lt;li&gt;这个新对象会绑定到函数调用的 &lt;code&gt;this&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;如果函数没有返回其他对象，那么 &lt;code&gt;new&lt;/code&gt; 表达式中的函数调用会自动返回这个新对象&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;举例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a = a;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; foo(&lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(bar.a);  &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 &lt;code&gt;new&lt;/code&gt;  来调用 &lt;code&gt;foo(..)&lt;/code&gt; 时，会构造一个新对象并把它绑定到 &lt;code&gt;foo(..)&lt;/code&gt; 调用中的 &lt;code&gt;this&lt;/code&gt; 上。&lt;/p&gt;
&lt;h1 id=&quot;优先级&quot;&gt;&lt;a href=&quot;#优先级&quot; class=&quot;headerlink&quot; title=&quot;优先级&quot;&gt;&lt;/a&gt;优先级&lt;/h1&gt;&lt;p&gt;具体推断细节不再表述，有兴趣的同学可以自行查看《你不知道的 JavaScript》上卷第 2 章。以上四种绑定规则的使用先后推断如下：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;函数是否在 &lt;code&gt;new&lt;/code&gt; 中调用（&lt;code&gt;new&lt;/code&gt; 绑定）？如果是的话 &lt;code&gt;this&lt;/code&gt; 绑定的是新创建的对象。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; foo();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数是否通过 &lt;code&gt;call&lt;/code&gt;、&lt;code&gt;apply&lt;/code&gt; （显示绑定）或者硬绑定？如果是的话，&lt;code&gt;this&lt;/code&gt; 绑定的是指定的对象。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = foo.call(obj2);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;函数是否在某个上下文对象中调用（隐式绑定）？如果是的话，&lt;code&gt;this&lt;/code&gt; 绑定的是那个上下文对象。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = obj1.foo();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;如果都不是的话，使用默认绑定。如果在严格模式下，就绑定到 &lt;code&gt;undefined&lt;/code&gt;，否则绑定到全局对象。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; bar = foo();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;绑定例外&quot;&gt;&lt;a href=&quot;#绑定例外&quot; class=&quot;headerlink&quot; title=&quot;绑定例外&quot;&gt;&lt;/a&gt;绑定例外&lt;/h1&gt;&lt;ol&gt;
&lt;li&gt;&lt;p&gt;如果把 &lt;code&gt;null&lt;/code&gt; 或者 &lt;code&gt;undefined&lt;/code&gt; 作为 &lt;code&gt;this&lt;/code&gt; 的绑定对象传入 &lt;code&gt;call&lt;/code&gt;、&lt;code&gt;apply&lt;/code&gt; 或者 &lt;code&gt;bind&lt;/code&gt;，那么这些值在调用时会被忽略，实际应用的是默认绑定规则。（书中推荐使用一个空对象来绑定 &lt;code&gt;this&lt;/code&gt;）。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;间接引用。这种情况容易在赋值时发生：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;foo&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log( &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.a);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; a = &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;；&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; o = &amp;#123;a: &lt;span class=&quot;number&quot;&gt;3&lt;/span&gt;, foo: foo&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; p = &amp;#123;a: &lt;span class=&quot;number&quot;&gt;4&lt;/span&gt;&amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;o.foo();  &lt;span class=&quot;comment&quot;&gt;// 3&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;(p.foo = o.foo)();  &lt;span class=&quot;comment&quot;&gt;// 2&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;p.foo()&lt;/code&gt; 实际上引用了 &lt;code&gt;foo()&lt;/code&gt; ，如此，会应用默认绑定。&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h1 id=&quot;其他&quot;&gt;&lt;a href=&quot;#其他&quot; class=&quot;headerlink&quot; title=&quot;其他&quot;&gt;&lt;/a&gt;其他&lt;/h1&gt;&lt;p&gt;ES6 对改变 &lt;code&gt;this&lt;/code&gt; 的混乱绑定作了相应的努力，诞生了箭头函数，其根据当前词法作用域来决定 &lt;code&gt;this&lt;/code&gt; 而非上面的四条规则，具体来说，箭头函数会继承外层函数调用的 &lt;code&gt;this&lt;/code&gt; 绑定（这其实和 ES6 之前代码中的 &lt;code&gt;self = this&lt;/code&gt; 是一个道理）。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言&lt;/h1&gt;&lt;p&gt;ES5 及之前时代的 JavaScript 中 &lt;code&gt;this&lt;/code&gt; 的绑定机制是让很多开发者头疼不已的事情。&lt;code&gt;th
    
    </summary>
    
      <category term="理论学习" scheme="http://chriscindy.top/categories/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="JavaScript" scheme="http://chriscindy.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>深入 MutationObserver</title>
    <link href="http://chriscindy.top/2016/09/08/%E6%B7%B1%E5%85%A5%20MutationObserver/"/>
    <id>http://chriscindy.top/2016/09/08/深入 MutationObserver/</id>
    <published>2016-09-08T02:42:04.000Z</published>
    <updated>2016-09-08T08:57:28.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;MutationObserver 给开发者们提供了一种能在某个范围内的 DOM 树发生变化时作出适当反应的能力。该 API 设计用来替换掉在 DOM 3 事件规范中引入的 Mutation 事件。&lt;/p&gt;
&lt;p&gt;——MDN&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;1-概述&quot;&gt;&lt;a href=&quot;#1-概述&quot; class=&quot;headerlink&quot; title=&quot;1. 概述&quot;&gt;&lt;/a&gt;1. 概述&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;监视 DOM 变动的接口&lt;/p&gt;
&lt;p&gt;当监视的 DOM 发生变动时 MutationObserver 将收到通知并触发事先设定好的回调函数。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类似于事件，但是异步触发&lt;/p&gt;
&lt;p&gt;添加监视时，MutationObserver 上的 observer 函数与 addEventListener 有相似之处，但不同于后者的同步触发，MutationObserver 是异步触发，此举是为了避免 DOM 频繁变动导致回调函数被频繁调用，造成浏览器卡顿。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;2-MutationObserver-构造函数&quot;&gt;&lt;a href=&quot;#2-MutationObserver-构造函数&quot; class=&quot;headerlink&quot; title=&quot;2. MutationObserver 构造函数&quot;&gt;&lt;/a&gt;2. MutationObserver 构造函数&lt;/h2&gt;&lt;p&gt;该构造函数用于实例化一个新的 MutaionObserver ，同时指定触发 DOM 变动时的回调函数：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; observer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MutationObserver(callback);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;callback，即回调函数接收两个参数，第一个参数是一个包含了所有 &lt;code&gt;MutationRecord&lt;/code&gt; 对象（后文会介绍，别急）的数组，第二个参数则是这个MutationObserver 实例本身。&lt;/p&gt;
&lt;h2 id=&quot;3-MutationObserver-实例方法&quot;&gt;&lt;a href=&quot;#3-MutationObserver-实例方法&quot; class=&quot;headerlink&quot; title=&quot;3. MutationObserver 实例方法&quot;&gt;&lt;/a&gt;3. MutationObserver 实例方法&lt;/h2&gt;&lt;h3 id=&quot;3-1-Observe-Node-target-optional-MutationObserverInit-options&quot;&gt;&lt;a href=&quot;#3-1-Observe-Node-target-optional-MutationObserverInit-options&quot; class=&quot;headerlink&quot; title=&quot;3.1 Observe(Node target, optional MutationObserverInit options);&quot;&gt;&lt;/a&gt;3.1 &lt;code&gt;Observe(Node target, optional MutationObserverInit options);&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;给 MutationObserver 实例添加要观察的 DOM 节点，并可通过一个可选的 options 参数来配置观察哪些变动，该 options 为一个名为 &lt;code&gt;MutationObserverInit&lt;/code&gt; 的对象。&lt;/p&gt;
&lt;p&gt;以下是 &lt;code&gt;MutationObserverInit&lt;/code&gt; 对象的各属性及其描述：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;属性&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;childList&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Boolean&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否观察子节点的变动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;attributes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Boolean&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否观察属性的变动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;characterData&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Boolean&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否节点内容或节点文本的变动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;subtree&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Boolean&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;是否观察所有后代节点的变动&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;attributeOldValue&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Boolean&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;观察 attributes 变动时，是否记录变动前的属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;characterDataOldValue&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Boolean&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;观察 characterData 变动时，是否记录变动前的属性值&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;attributeFilter&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Array&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;表示需要观察的特定属性（比如[‘class’,’src’]），不在此数组中的属性变化时将被忽略&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;注：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;不能单独观察 subtree 变动，必须同时指定 childList、attributes 和 characterData 中的一种或多种。&lt;/li&gt;
&lt;li&gt;为同一个 DOM 节点多次添加同一个 MutationObserver 是无效的，回调函数将只被触发一次。但如果指定不同的 options 对象（即观察不同的变动），即被视为不同的 MutationObserver。（是不是感觉跟 addEventListener 确实很像？）&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-2-disconnect&quot;&gt;&lt;a href=&quot;#3-2-disconnect&quot; class=&quot;headerlink&quot; title=&quot;3.2  disconnect();&quot;&gt;&lt;/a&gt;3.2  &lt;code&gt;disconnect();&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;该方法用来停止观察。后续如果 DOM 节点发生变动将不再触发回调函数。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;observer.disconnect();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;继续类比，&lt;code&gt;disconnect&lt;/code&gt; 函数和 &lt;code&gt;removeEventListener&lt;/code&gt;大致类似，除了 &lt;code&gt;disconnect&lt;/code&gt; 函数比较粗暴（无法传参配置），会把该 MutationObserver 实例上所有的观察都停止。&lt;/p&gt;
&lt;h3 id=&quot;3-3-takeRecords&quot;&gt;&lt;a href=&quot;#3-3-takeRecords&quot; class=&quot;headerlink&quot; title=&quot;3.3  takeRecords();&quot;&gt;&lt;/a&gt;3.3  &lt;code&gt;takeRecords();&lt;/code&gt;&lt;/h3&gt;&lt;p&gt;该方法用来清除变动记录，返回一个包含了 &lt;code&gt;MutationRecord&lt;/code&gt; 对象的数组。&lt;code&gt;MutationRecord&lt;/code&gt; 又出现了。它是啥？&lt;/p&gt;
&lt;p&gt;实际上，DOM 每次发生变化，就会生成一条变动记录，这个变动记录对应一个 &lt;code&gt;MutationRecord&lt;/code&gt; 对象。以下是 &lt;code&gt;MutationRecord&lt;/code&gt; 对象的各属性及其描述：&lt;/p&gt;
&lt;table&gt;
&lt;thead&gt;
&lt;tr&gt;
&lt;th style=&quot;text-align:left&quot;&gt;属性&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;类型&lt;/th&gt;
&lt;th style=&quot;text-align:left&quot;&gt;描述&lt;/th&gt;
&lt;/tr&gt;
&lt;/thead&gt;
&lt;tbody&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;type&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;String&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;根据变动类型，值为 attributes， characterData 或  childList&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;target&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Node&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;发生变动的DOM节点&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;addedNodes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;NodeList&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;被添加的节点，或者为 null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;removedNodes&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;NodeList&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;被删除的节点，或者为 null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;previousSibling&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Node&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;被添加或被删除的节点的前一个兄弟节点，或者为 null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;nextSibling&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;Node&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;被添加或被删除的节点的后一个兄弟节点，或者为 null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;attributeName&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;String&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;发生变更的属性的本地名称，或者为 null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;attributeNamespace&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;String&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;发生变更的属性的命名空间，或者为 null&lt;/td&gt;
&lt;/tr&gt;
&lt;tr&gt;
&lt;td style=&quot;text-align:left&quot;&gt;oldValue&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;String&lt;/td&gt;
&lt;td style=&quot;text-align:left&quot;&gt;如果 type 为 attributes，则返回该属性变化之前的属性值；如果 type 为 characterData，则返回该节点变化之前的文本数据；如果 type为 childList，则返回 null&lt;/td&gt;
&lt;/tr&gt;
&lt;/tbody&gt;
&lt;/table&gt;
&lt;p&gt;前面我们说 MutationObserver 异步处理触发，实际上它的原理就是等待一个脚本任务完成，将这个过程中产生的所有变动记录即所有的 &lt;code&gt;MutationRecord&lt;/code&gt; 对象存储到一个数组中，最后再统一处理这个数组。而这个包含了所有变动记录的数组，也将成为回调函数的第一个参数。下面是一个回调函数处理该数组的示例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; observer = &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; MutationObserver(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;mutations&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  mutations.forEach(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;mutation&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(mutation.type);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;);    &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;4-兼容性&quot;&gt;&lt;a href=&quot;#4-兼容性&quot; class=&quot;headerlink&quot; title=&quot;4. 兼容性&quot;&gt;&lt;/a&gt;4. 兼容性&lt;/h2&gt;&lt;p&gt;MutationObserver 在 DOM Level 4 中被引入，其兼容性如下图所示：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/801b780ajw1f7lc2hbpxjj21kw0m6dka.jpg&quot; alt=&quot;&quot;&gt; &lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;参考文献：&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/API/MutationObserver&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN MutationObserver&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;&lt;a href=&quot;http://javascript.ruanyifeng.com/dom/mutationobserver.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;《JavaScript 标准参考教程（alpha）》—— MutationObserver&lt;/a&gt;&lt;/p&gt;
&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;MutationObserver 给开发者们提供了一种能在某个范围内的 DOM 树发生变化时作出适当反应的能力。该 API 设计用来替换掉在 DOM 3 事件规范中引入的 Mutation 事件。&lt;/p&gt;
&lt;p&gt;——MDN&lt;/p&gt;
&lt;/blockq
    
    </summary>
    
      <category term="技术研究" scheme="http://chriscindy.top/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="DOM" scheme="http://chriscindy.top/tags/DOM/"/>
    
  </entry>
  
  <entry>
    <title>采用 gulp 优化 hexo 博客打开速度</title>
    <link href="http://chriscindy.top/2016/08/22/%E9%87%87%E7%94%A8%20gulp%20%E4%BC%98%E5%8C%96%20hexo%20%E5%8D%9A%E5%AE%A2%E6%89%93%E5%BC%80%E9%80%9F%E5%BA%A6/"/>
    <id>http://chriscindy.top/2016/08/22/采用 gulp 优化 hexo 博客打开速度/</id>
    <published>2016-08-22T09:42:36.000Z</published>
    <updated>2016-09-15T15:22:21.000Z</updated>
    
    <content type="html">&lt;p&gt;博客搭建这么久了发现并没有进行过优化，首页虽然打开速度勉强能够接受，但是 github 和 coding 提供的空间有限，是时候优化一下了。基本思路是采用 gulp 进行代码的压缩等。&lt;/p&gt;
&lt;p&gt;首先需要安装的 gulp 插件有：&lt;code&gt;gulp-clean-css&lt;/code&gt; 、&lt;code&gt;gulp-uglify&lt;/code&gt;、&lt;code&gt;gulp-htmlmin&lt;/code&gt;、&lt;code&gt;gulp-htmlclean&lt;/code&gt;。安装它们并将其加入到 package.json 的依赖中：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm i --save gulp-clean-css gulp-uglify gulp-htmlmin gulp-htmlclean&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;当然，你的电脑上需要安装有 gulp,我这里进行了全局安装：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm i -g gulp&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;然后在项目的根目录下新建 gulpfile.js 文件，里面一通配置，还是比较简单的，稍微熟悉点 gulp 的都没多大问题：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; gulp = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; cleancss = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-clean-css&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; uglify = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-uglify&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; htmlmin = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-htmlmin&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; htmlclean = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;gulp-htmlclean&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*压缩CSS*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minify-css&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./public/**/*.css&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(cleancss())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./public&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*压缩html文件*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minify-html&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./public/**/*.html&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(htmlclean())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(htmlmin(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      removeComments: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      minifyJS: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      minifyCSS: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      minifyURLs: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;))&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./public&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;/*压缩JS文件*/&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;minify-js&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; gulp.src(&lt;span class=&quot;string&quot;&gt;&#39;./public/**/*.js&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(uglify())&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    .pipe(gulp.dest(&lt;span class=&quot;string&quot;&gt;&#39;./public&#39;&lt;/span&gt;));&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp.task(&lt;span class=&quot;string&quot;&gt;&#39;default&#39;&lt;/span&gt;, [&lt;span class=&quot;string&quot;&gt;&#39;minify-html&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;minify-css&#39;&lt;/span&gt;, &lt;span class=&quot;string&quot;&gt;&#39;minify-js&#39;&lt;/span&gt;]);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;大功告成。这样在执行生成命令和部署命令中间加一个 gulp 的命令即可：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;hexo g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;gulp&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;hexo d&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;实测发现貌似博客打开速度是快了那么一丢丢。哈哈，就当是有效的吧。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;博客搭建这么久了发现并没有进行过优化，首页虽然打开速度勉强能够接受，但是 github 和 coding 提供的空间有限，是时候优化一下了。基本思路是采用 gulp 进行代码的压缩等。&lt;/p&gt;
&lt;p&gt;首先需要安装的 gulp 插件有：&lt;code&gt;gulp-clean-css
    
    </summary>
    
      <category term="学以致用" scheme="http://chriscindy.top/categories/%E5%AD%A6%E4%BB%A5%E8%87%B4%E7%94%A8/"/>
    
    
      <category term="博客搭建" scheme="http://chriscindy.top/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>babel-rigster 和 babel-node 的使用</title>
    <link href="http://chriscindy.top/2016/08/22/babel-rigster%20%E5%92%8C%20babel-node%20%E7%9A%84%E4%BD%BF%E7%94%A8/"/>
    <id>http://chriscindy.top/2016/08/22/babel-rigster 和 babel-node 的使用/</id>
    <published>2016-08-22T09:37:28.000Z</published>
    <updated>2016-09-08T08:56:28.000Z</updated>
    
    <content type="html">&lt;p&gt;Babel 6 中 &lt;code&gt;babel-register&lt;/code&gt; 和 &lt;code&gt;babel-node&lt;/code&gt; 两个模块是开发时非常好用的转码工具。先来看一下如何使用：&lt;/p&gt;
&lt;h4 id=&quot;1-babel-register&quot;&gt;&lt;a href=&quot;#1-babel-register&quot; class=&quot;headerlink&quot; title=&quot;1. babel-register&quot;&gt;&lt;/a&gt;1. babel-register&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装：&lt;code&gt;npm install babel-register&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;作用：&lt;code&gt;babel-register&lt;/code&gt; 实际上为&lt;code&gt;require&lt;/code&gt;加了一个钩子（hook），之后所有被 node 引用的 &lt;code&gt;.es6&lt;/code&gt;、&lt;code&gt;.es&lt;/code&gt;、&lt;code&gt;.jsx&lt;/code&gt; 以及 &lt;code&gt;.js&lt;/code&gt; 文件都会先被 Babel 转码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用示例：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//index.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Hello World!&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//register.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;babel-register&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./index.js&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;node register.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;2-babel-node&quot;&gt;&lt;a href=&quot;#2-babel-node&quot; class=&quot;headerlink&quot; title=&quot;2. babel-node&quot;&gt;&lt;/a&gt;2. babel-node&lt;/h4&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;安装：&lt;code&gt;npm install babel-node&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;作用：替代 CLI 中的 &lt;code&gt;node&lt;/code&gt; 命令，可以直接运行采用 ES6 语法编写的代码。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用示例：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;在 npm &lt;code&gt;scripts&lt;/code&gt; 中：&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;scripts&quot;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //&quot;script-name&quot;: &quot;node main.js&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;script-name&quot;: &quot;babel-node main.js&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;在命令行中：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;全局安装 &lt;code&gt;babel-node&lt;/code&gt;：&lt;code&gt;babel-node main.js&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;本地安装 &lt;code&gt;babel-node&lt;/code&gt;：&lt;code&gt;./node_modules/.bin/babel-node main.js&lt;/code&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h4 id=&quot;3-使用局限&quot;&gt;&lt;a href=&quot;#3-使用局限&quot; class=&quot;headerlink&quot; title=&quot;3. 使用局限&quot;&gt;&lt;/a&gt;3. 使用局限&lt;/h4&gt;&lt;p&gt;尽管 &lt;code&gt;babel-register&lt;/code&gt; 和 &lt;code&gt;babel-node&lt;/code&gt; 都非常好用，但是由于二者都是实时转码，因而性能上会有一定影响。官方建议将二者仅置于开发环境下使用。而在正式生产环境中部署时，预先编译代码是值得推荐的做法。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Babel 6 中 &lt;code&gt;babel-register&lt;/code&gt; 和 &lt;code&gt;babel-node&lt;/code&gt; 两个模块是开发时非常好用的转码工具。先来看一下如何使用：&lt;/p&gt;
&lt;h4 id=&quot;1-babel-register&quot;&gt;&lt;a href=&quot;#1-ba
    
    </summary>
    
      <category term="技术使用" scheme="http://chriscindy.top/categories/%E6%8A%80%E6%9C%AF%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Babel" scheme="http://chriscindy.top/tags/Babel/"/>
    
  </entry>
  
  <entry>
    <title>Babel 6 特性总结</title>
    <link href="http://chriscindy.top/2016/08/22/Babel%206%20%E7%89%B9%E6%80%A7%E6%80%BB%E7%BB%93/"/>
    <id>http://chriscindy.top/2016/08/22/Babel 6 特性总结/</id>
    <published>2016-08-22T09:33:53.000Z</published>
    <updated>2016-09-08T08:57:32.000Z</updated>
    
    <content type="html">&lt;h3 id=&quot;0-改进&quot;&gt;&lt;a href=&quot;#0-改进&quot; class=&quot;headerlink&quot; title=&quot;0. 改进&quot;&gt;&lt;/a&gt;0. 改进&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;模块化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可选的插件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;预设&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;性能改进&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;插件 API&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Babel 5&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt; &amp;#123;Plugin, types: t&amp;#125; &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; Plugin(&lt;span class=&quot;string&quot;&gt;&#39;ast-transform&#39;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        visitor: &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                      &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// Babel 6&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;export&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;default&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt; &amp;#123; types: t&amp;#125; &lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        visitor: &amp;#123; ... &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;1-安装-Babel-6&quot;&gt;&lt;a href=&quot;#1-安装-Babel-6&quot; class=&quot;headerlink&quot; title=&quot;1.安装 Babel 6&quot;&gt;&lt;/a&gt;1.安装 Babel 6&lt;/h3&gt;&lt;p&gt;&lt;code&gt;npm install&lt;/code&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;babel-cli&lt;/strong&gt;&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;usage:&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;babel app.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;command: &lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;-o –out-file&lt;/li&gt;
&lt;li&gt;-d –out-dir&lt;/li&gt;
&lt;li&gt;-w –watch&lt;/li&gt;
&lt;li&gt;–source-maps&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;babel-register&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//index.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Hello World!&#39;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//register.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;babel-register&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;./index.js&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;node register.js&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注：生产环境不适用 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;babel-node&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;scripts&quot;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    //&quot;script-name&quot;: &quot;node index.js&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;script-name&quot;: &quot;babel-node index.js&quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;command:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;–presets&lt;/li&gt;
&lt;li&gt;–plugins&lt;/li&gt;
&lt;li&gt;–ignore&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：生产环境不适用 &lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;strong&gt;babel-core&lt;/strong&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; babel = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;babel-core&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;babel.transform(&lt;span class=&quot;string&quot;&gt;&quot;code();&quot;&lt;/span&gt;, options);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; &amp;#123; code, map, ast &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;babel.transformFile(&lt;span class=&quot;string&quot;&gt;&quot;filename.js&quot;&lt;/span&gt;, options, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;err, result&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  result; &lt;span class=&quot;comment&quot;&gt;// =&amp;gt; &amp;#123; code, map, ast &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;babel.transformFileSync(&lt;span class=&quot;string&quot;&gt;&quot;filename.js&quot;&lt;/span&gt;, options);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// =&amp;gt; &amp;#123; code, map, ast &amp;#125;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;2-配置-Babel-6&quot;&gt;&lt;a href=&quot;#2-配置-Babel-6&quot; class=&quot;headerlink&quot; title=&quot;2. 配置 Babel 6&quot;&gt;&lt;/a&gt;2. 配置 Babel 6&lt;/h3&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;//.babelrc&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;presets&quot;: [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;plugins&quot;: []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//or package.json&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ...&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;babel&quot;:&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;presets&quot;: [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  	&quot;plugins&quot;: []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;presets&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;babel-preset-es2015&lt;/li&gt;
&lt;li&gt;babel-preset-react&lt;/li&gt;
&lt;li&gt;babel-preset-stage-x(x=0,1,2,3)&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;presets&quot;&lt;/span&gt;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;react&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;string&quot;&gt;&quot;stage-2&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: []&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;plugins&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;babel-plugin-transform-es2015-classes&lt;/li&gt;
&lt;li&gt;babel-plugin-transform-es2015-arrow-functions&lt;/li&gt;
&lt;li&gt;…&lt;/li&gt;
&lt;/ul&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;attr&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;string&quot;&gt;&quot;transform-es2015-classes&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;     &lt;span class=&quot;string&quot;&gt;&quot;transform-es2015-arrow-functions&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;loose mode&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      //&lt;span class=&quot;string&quot;&gt;&quot;transform-es2015-classes&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      [&lt;span class=&quot;string&quot;&gt;&quot;transform-es2015-classes&quot;&lt;/span&gt;, &amp;#123; &lt;span class=&quot;attr&quot;&gt;&quot;loose&quot;&lt;/span&gt;: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt; &amp;#125;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;a href=&quot;https://mp.weixin.qq.com/s?__biz=MzI3NTE2NjYxNw==&amp;amp;mid=2650600240&amp;amp;idx=1&amp;amp;sn=88f53bf78b5b174acd6805fe7026cd66&amp;amp;scene=1&amp;amp;srcid=0816pFmqA5bQYhJUHdBBMDuq&amp;amp;key=305bc10ec50ec19bea029543ffd48645f5bec6aeefc9ecf044a7e08d510f51dd27c850d970a291e06e17bcfa70f438e0&amp;amp;ascene=0&amp;amp;uin=MTkxMDY2NDA2MQ%3D%3D&amp;amp;devicetype=iMac+MacBookPro12%2C1+OSX+OSX+10.11.5+build(15F34&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;扩展—— Babel 6 loose&lt;/a&gt;&amp;amp;version=11020201&amp;amp;pass_ticket=eUYpNbnbXM9RBSMCUPMk%2FYHjU3v29WWpWF5gQJ9FeU6LHqIZ0eAx6rz%2FawLCrm9c)&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;基于环境自定义 Babel&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;presets&quot;&lt;/span&gt;: [&lt;span class=&quot;string&quot;&gt;&quot;es2015&quot;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: [],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;env&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;development&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: [...]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;attr&quot;&gt;&quot;production&quot;&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;attr&quot;&gt;&quot;plugins&quot;&lt;/span&gt;: [...]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;&lt;code&gt;env&lt;/code&gt; : &lt;code&gt;process.env.BABEL_ENV&lt;/code&gt; or &lt;code&gt;process.env.NODE_env&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;3-Webpack&quot;&gt;&lt;a href=&quot;#3-Webpack&quot; class=&quot;headerlink&quot; title=&quot;3. Webpack&quot;&gt;&lt;/a&gt;3. Webpack&lt;/h3&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//webpack.config.js&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; path = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;path&#39;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ···&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ···&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            loaders: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    loader: &lt;span class=&quot;string&quot;&gt;&#39;babel-loader&#39;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    test: path.resolve(__dirname, &lt;span class=&quot;string&quot;&gt;&#39;js&#39;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    query: &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                        presets: [&lt;span class=&quot;string&quot;&gt;&#39;es2015&#39;&lt;/span&gt;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        ···&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;ul&gt;
&lt;li&gt;tree-shaking&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;0-改进&quot;&gt;&lt;a href=&quot;#0-改进&quot; class=&quot;headerlink&quot; title=&quot;0. 改进&quot;&gt;&lt;/a&gt;0. 改进&lt;/h3&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;模块化&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;可选的插件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;预设&lt;/p&gt;

    
    </summary>
    
      <category term="技术使用" scheme="http://chriscindy.top/categories/%E6%8A%80%E6%9C%AF%E4%BD%BF%E7%94%A8/"/>
    
    
      <category term="Babel" scheme="http://chriscindy.top/tags/Babel/"/>
    
  </entry>
  
  <entry>
    <title>swiftype 搜索服务更换为 Local Search</title>
    <link href="http://chriscindy.top/2016/08/10/swiftype%20%E6%90%9C%E7%B4%A2%E6%9C%8D%E5%8A%A1%E6%9B%B4%E6%8D%A2%E4%B8%BA%20Local%20Search/"/>
    <id>http://chriscindy.top/2016/08/10/swiftype 搜索服务更换为 Local Search/</id>
    <published>2016-08-10T06:49:15.000Z</published>
    <updated>2016-09-08T08:57:43.000Z</updated>
    
    <content type="html">&lt;p&gt;突然发现博客的搜索服务无法使用，查之发现是因为服务提供商 swiftype 目前已经没有了免费账户的选项，15 天试用期结束后如果不付费将无法继续使用。可以选择的账户类型如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006tKfTcjw1f6onlf2wwxj31kw0qgaf1.jpg&quot; alt=&quot;swiftype.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;恕我直言，这是完全不让我们这种小博客用户使用的节奏啊。既然 swiftype 已经无法继续使用，我们只能另寻他路。&lt;/p&gt;
&lt;p&gt;Next 的使用文档在 swiftype 之外提供了两种方案：微搜索和 Local Search。&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;&lt;a href=&quot;http://tinysou.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;微搜索&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;国内的一家志在做最好的站内搜索的服务商。截止本文发表时，其官网仍无法注册，进入注册页提示“504 Gateway Time-out”，无奈，放弃。&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;Local Search&lt;/p&gt;
&lt;p&gt;尝试了一下，还不错，免费，速度堪比 swiftype，Next 定制的外观也还可以，就它了。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tKfTcjw1f6oo7rsw3uj319q116aeu.jpg&quot; alt=&quot;localsearch.jpg&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;突然发现博客的搜索服务无法使用，查之发现是因为服务提供商 swiftype 目前已经没有了免费账户的选项，15 天试用期结束后如果不付费将无法继续使用。可以选择的账户类型如下：&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww4.sinaimg.cn/large/006
    
    </summary>
    
      <category term="解决方案" scheme="http://chriscindy.top/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="博客搭建" scheme="http://chriscindy.top/tags/%E5%8D%9A%E5%AE%A2%E6%90%AD%E5%BB%BA/"/>
    
  </entry>
  
  <entry>
    <title>Babel 6 的 loose 模式</title>
    <link href="http://chriscindy.top/2016/08/10/Babel%206%20%E7%9A%84%20loose%20%E6%A8%A1%E5%BC%8F/"/>
    <id>http://chriscindy.top/2016/08/10/Babel 6 的 loose 模式/</id>
    <published>2016-08-10T06:32:49.000Z</published>
    <updated>2016-09-08T08:56:38.000Z</updated>
    
    <content type="html">&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tKfTcjw1f6omyfzq3qj31kw0pu7av.jpg&quot; alt=&quot;babel.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;headerlink&quot; title=&quot;1.前言&quot;&gt;&lt;/a&gt;1.前言&lt;/h3&gt;&lt;p&gt;Babel 的 loose 模式将 ES6 代码转译成 ES5 代码，loose 模式是不太忠实于 ES6 语义的。这篇文章解释了它是怎么工作的以及它的优点与缺点（剧透：通常是不推荐的）。&lt;/p&gt;
&lt;p&gt;在这之前，我们先简单了解一下 Babel 中的一些基础知识：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;配置文件&lt;/p&gt;
&lt;p&gt;Babel 的配置文件是&lt;code&gt;.babelrc&lt;/code&gt;，存放在下项目的根目录下，该文件用来设置预设和插件，基本格式如下：&lt;/p&gt;
&lt;figure class=&quot;highlight json&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;presets&quot;&lt;/span&gt;:[],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;attr&quot;&gt;&quot;plugins&quot;&lt;/span&gt;:[]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;presets（预设）&lt;/p&gt;
&lt;p&gt;为了将 Babel 的输出配置为符合要求的情况，我们需要指定 Babel 使用什么插件。可以指定的有：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单独的插件&lt;/li&gt;
&lt;li&gt;预设，即支持各种编译方案的插件集合。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;下面是一些使用广泛的预设：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;es2015：将 ES6 代码编译为 ES5&lt;/li&gt;
&lt;li&gt;stage-3：将&lt;code&gt;stage 3 ECMAScript proposals&lt;/code&gt;编译为ES5&lt;/li&gt;
&lt;li&gt;react：将 JSX 编译为 JavaScript 并且移除 Flow 的类型注解&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;预设通过 npm 安装。他们在 npm 中的包名称为其名字加上前缀&lt;code&gt;babel-preset-&lt;/code&gt;。比如安装&lt;code&gt;es2015&lt;/code&gt;时，我们可以用以下的命令：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install babel-preset-es2015&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;plugins（插件）&lt;/p&gt;
&lt;p&gt;笼统地讲，插件是在编译过程中应用到输入中的函数。插件有两种重要的类别：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;语法插件。其作用为使 Babel 具备处理内建基础语法之外的语法实体。它们能够帮助构造抽象语法树（AST）。典型的语法插件有：&lt;a href=&quot;http://babeljs.io/docs/plugins/syntax-async-functions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;syntax-async-functions&lt;/a&gt; 以及 &lt;a href=&quot;http://babeljs.io/docs/plugins/syntax-jsx/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;syntax-jsx&lt;/a&gt;。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;转换插件。其作用为修改抽象语法树。典型的转换插件有：&lt;a href=&quot;http://babeljs.io/docs/plugins/transform-async-to-generator/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;transform-async-to-generator&lt;/a&gt;、&lt;a href=&quot;http://babeljs.io/docs/plugins/transform-react-jsx/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;transform-react-jsx&lt;/a&gt;、&lt;a href=&quot;http://babeljs.io/docs/plugins/transform-es2015-arrow-functions/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;transform-es2015-arrow-functions&lt;/a&gt; 等。&lt;/p&gt;
&lt;p&gt;如果你想编译不包含在基础语法之内的代码，那你将同时需要一个语法插件以及与之相对应的转换插件。不过，每个依赖于语法插件的转换插件都将自动触发该语法插件。&lt;/p&gt;
&lt;p&gt;插件同样通过 npm 安装，他们在 npm 中的包名称为其名字加上前缀&lt;code&gt;babel-plugin-&lt;/code&gt;：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;安装插件&lt;code&gt;syntax-jsx&lt;/code&gt;：&lt;code&gt;npm install babel-plugin-syntax-jsx&lt;/code&gt;&lt;/li&gt;
&lt;li&gt;安装插件&lt;code&gt;transform-react-jsx&lt;/code&gt;：&lt;code&gt;npm install babel-plugin-transform-react-jsx&lt;/code&gt;​&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OK，基础知识介绍到这里，如想进一步学习 Babel，可以去到&lt;a href=&quot;https://babeljs.io/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel官网&lt;/a&gt;。下面回归主题，探究 Babel 6 的 loose 模式。&lt;/p&gt;
&lt;h3 id=&quot;2-两种模式&quot;&gt;&lt;a href=&quot;#2-两种模式&quot; class=&quot;headerlink&quot; title=&quot;2. 两种模式&quot;&gt;&lt;/a&gt;2. 两种模式&lt;/h3&gt;&lt;p&gt;许多 Babel 的插件有两种模式：&lt;/p&gt;
&lt;h6 id=&quot;•-尽可能符合-ECMAScript6-语义的-normal-模式。&quot;&gt;&lt;a href=&quot;#•-尽可能符合-ECMAScript6-语义的-normal-模式。&quot; class=&quot;headerlink&quot; title=&quot;• 尽可能符合 ECMAScript6 语义的 normal 模式。&quot;&gt;&lt;/a&gt;• 尽可能符合 ECMAScript6 语义的 normal 模式。&lt;/h6&gt;&lt;h6 id=&quot;•-提供更简单-ES5-代码的-loose-模式。&quot;&gt;&lt;a href=&quot;#•-提供更简单-ES5-代码的-loose-模式。&quot; class=&quot;headerlink&quot; title=&quot;• 提供更简单 ES5 代码的 loose 模式。&quot;&gt;&lt;/a&gt;• 提供更简单 ES5 代码的 loose 模式。&lt;/h6&gt;&lt;p&gt;通常，推荐不使用 loose 模式，使用这种模式的优点和缺点是：&lt;/p&gt;
&lt;h6 id=&quot;•-优点：生成的代码可能更快，对老的引擎有更好的兼容性，代码通常更简洁，更加的“ES5化”。&quot;&gt;&lt;a href=&quot;#•-优点：生成的代码可能更快，对老的引擎有更好的兼容性，代码通常更简洁，更加的“ES5化”。&quot; class=&quot;headerlink&quot; title=&quot;• 优点：生成的代码可能更快，对老的引擎有更好的兼容性，代码通常更简洁，更加的“ES5化”。&quot;&gt;&lt;/a&gt;• 优点：生成的代码可能更快，对老的引擎有更好的兼容性，代码通常更简洁，更加的“ES5化”。&lt;/h6&gt;&lt;h6 id=&quot;•-缺点：你是在冒险——随后从转译的-ES6-到原生的-ES6-时你会遇到问题。这个险是很不值得冒的。&quot;&gt;&lt;a href=&quot;#•-缺点：你是在冒险——随后从转译的-ES6-到原生的-ES6-时你会遇到问题。这个险是很不值得冒的。&quot; class=&quot;headerlink&quot; title=&quot;• 缺点：你是在冒险——随后从转译的 ES6 到原生的 ES6 时你会遇到问题。这个险是很不值得冒的。&quot;&gt;&lt;/a&gt;• 缺点：你是在冒险——随后从转译的 ES6 到原生的 ES6 时你会遇到问题。这个险是很不值得冒的。&lt;/h6&gt;&lt;h4 id=&quot;2-1-切换到-loose-模式&quot;&gt;&lt;a href=&quot;#2-1-切换到-loose-模式&quot; class=&quot;headerlink&quot; title=&quot;2.1 切换到 loose 模式&quot;&gt;&lt;/a&gt;2.1 切换到 loose 模式&lt;/h4&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/bkonkle/babel-preset-es2015-loose&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;es2015-loose&lt;/a&gt; 是标准的 ES6 预设（preset）es2015 的 loose 版。&lt;a href=&quot;https://github.com/bkonkle/babel-preset-es2015-loose/blob/master/index.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;这个预设的代码&lt;/a&gt;对什么样的插件有 loose 模式以及怎样开启提供了很好的说明。以下是代码截选：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;module&lt;/span&gt;.exports = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    plugins: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ···&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      [&lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;babel-plugin-transform-es2015-classes&quot;&lt;/span&gt;), &amp;#123;loose: &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;&amp;#125;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;babel-plugin-transform-es2015-object-super&quot;&lt;/span&gt;),&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      ···&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;这是一个 CommonJS 模块，可以使用任何的 ECMAScript 5，如果你通过&lt;code&gt;.babelrc&lt;/code&gt; 或者&lt;code&gt;package.json&lt;/code&gt;配置 babel（&lt;a href=&quot;http://www.2ality.com/2015/11/configuring-babel6.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;详细配置&lt;/a&gt;），你需要使用 JSON。也可以包含 preset：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;···&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &quot;presets&quot;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ···&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &quot;es2015-loose&quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    ···&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; ···&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;也可以单独引入插件：&lt;br&gt;&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;···&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &quot;plugins&quot;: [&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   ···&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   [&quot;transform-es2015-classes&quot;, &amp;#123;loose: true&amp;#125;],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &quot;transform-es2015-object-super&quot;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   ···&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; ],&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; ···&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h3 id=&quot;3-例子：normal-模式与-loose-模式的输出&quot;&gt;&lt;a href=&quot;#3-例子：normal-模式与-loose-模式的输出&quot; class=&quot;headerlink&quot; title=&quot;3. 例子：normal 模式与 loose 模式的输出&quot;&gt;&lt;/a&gt;3. 例子：normal 模式与 loose 模式的输出&lt;/h3&gt;&lt;p&gt;让我们看看模式如何影响下面代码的编译：&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;class&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;class&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt; &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;constructor&lt;/span&gt;(x, y) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x = x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y = y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    toString() &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;`(&lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.x&amp;#125;&lt;/span&gt;, &lt;span class=&quot;subst&quot;&gt;$&amp;#123;this.y&amp;#125;&lt;/span&gt;)`&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-1-normal-模式&quot;&gt;&lt;a href=&quot;#3-1-normal-模式&quot; class=&quot;headerlink&quot; title=&quot;3.1 normal 模式&quot;&gt;&lt;/a&gt;3.1 normal 模式&lt;/h4&gt;&lt;p&gt;在 normal 模式下，类的 prototype 方法是通过&lt;code&gt;Object.defineProperty&lt;/code&gt;添加的（第 A 行），来确保它们是不可以被枚举的，这是 ES6 规范所要求的。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;37&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;38&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;39&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;40&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;41&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;42&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt;&quot;use strict&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; _createClass = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;defineProperties&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;target, props&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;for&lt;/span&gt; (&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; i = &lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;; i &amp;lt; props.length; i++) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; descriptor = props[i];&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                descriptor.enumerable = descriptor.enumerable || &lt;span class=&quot;literal&quot;&gt;false&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                descriptor.configurable = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (&lt;span class=&quot;string&quot;&gt;&quot;value&quot;&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;in&lt;/span&gt; descriptor) descriptor.writable = &lt;span class=&quot;literal&quot;&gt;true&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;built_in&quot;&gt;Object&lt;/span&gt;.defineProperty(target, descriptor.key, descriptor);   &lt;span class=&quot;comment&quot;&gt;// (A)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;Constructor, protoProps, staticProps&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (protoProps) defineProperties(Constructor.prototype, protoProps);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (staticProps) defineProperties(Constructor, staticProps);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Constructor;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)();&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_classCallCheck&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;instance, Constructor&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt; (!(instance &lt;span class=&quot;keyword&quot;&gt;instanceof&lt;/span&gt; Constructor)) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;throw&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;TypeError&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&quot;Cannot call a class as a function&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Point = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            _classCallCheck(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, Point);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x = x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y = y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _createClass(Point, [&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            key: &lt;span class=&quot;string&quot;&gt;&quot;toString&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            value: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;                &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x + &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y + &lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;]);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Point;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;h4 id=&quot;3-2-loose-模式&quot;&gt;&lt;a href=&quot;#3-2-loose-模式&quot; class=&quot;headerlink&quot; title=&quot;3.2 loose 模式&quot;&gt;&lt;/a&gt;3.2 loose 模式&lt;/h4&gt;&lt;p&gt;在 loose 模式下，用通常的赋值方式添加方法（第 B 行），这种风格更像你用 ES5 手动编写代码。&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;meta&quot;&gt; &quot;use strict&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;_classCallCheck&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;instance, Constructor&lt;/span&gt;) &lt;/span&gt;&amp;#123; ··· &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; Point = (&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; (&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;Point&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;x, y&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        _classCallCheck(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;, Point);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x = x;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y = y;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    Point.prototype.toString = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt; &lt;span class=&quot;title&quot;&gt;toString&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;   &lt;span class=&quot;comment&quot;&gt;// (B)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;string&quot;&gt;&quot;(&quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.x + &lt;span class=&quot;string&quot;&gt;&quot;, &quot;&lt;/span&gt; + &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.y + &lt;span class=&quot;string&quot;&gt;&quot;)&quot;&lt;/span&gt;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; Point;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)();&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
&lt;p&gt;参考文献：&lt;/p&gt;
&lt;blockquote&gt;&lt;footer&gt;&lt;strong&gt;wd4blue&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://www.w3ctech.com/topic/1708?utm_source=tuicool&amp;utm_medium=referral&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Babel 6: loose 模式&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
&lt;blockquote&gt;&lt;footer&gt;&lt;strong&gt;2ality&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://www.2ality.com/2015/11/configuring-babel6.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Configuring Babel 6&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/006tKfTcjw1f6omyfzq3qj31kw0pu7av.jpg&quot; alt=&quot;babel.png&quot;&gt;&lt;/p&gt;
&lt;h3 id=&quot;1-前言&quot;&gt;&lt;a href=&quot;#1-前言&quot; class=&quot;hea
    
    </summary>
    
      <category term="技术研究" scheme="http://chriscindy.top/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Babel" scheme="http://chriscindy.top/tags/Babel/"/>
    
  </entry>
  
  <entry>
    <title>Riot.js 特性一览</title>
    <link href="http://chriscindy.top/2016/07/29/Riot.js%20%E7%89%B9%E6%80%A7%E4%B8%80%E8%A7%88/"/>
    <id>http://chriscindy.top/2016/07/29/Riot.js 特性一览/</id>
    <published>2016-07-29T08:11:36.000Z</published>
    <updated>2016-09-08T08:57:37.000Z</updated>
    
    <content type="html">&lt;blockquote&gt;
&lt;p&gt;注：本文基于Riot.js v2.5.0版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Riot-js简介&quot;&gt;&lt;a href=&quot;#Riot-js简介&quot; class=&quot;headerlink&quot; title=&quot;Riot.js简介&quot;&gt;&lt;/a&gt;Riot.js简介&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;类似 React 的 &lt;strong&gt;微型&lt;/strong&gt; UI 库&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;自定义标签/虚拟 DOM&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;适合编写独立组件&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;MVP 架构&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/006tNbRwjw1f69ltjvz8mj30jg042jrh.jpg&quot; alt=&quot;MVP 架构图&quot;&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;支持 IE9+ ？？&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;1-自定义标签&quot;&gt;&lt;a href=&quot;#1-自定义标签&quot; class=&quot;headerlink&quot; title=&quot;1.自定义标签&quot;&gt;&lt;/a&gt;1.自定义标签&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;布局与逻辑耦合，可重用组件&lt;/li&gt;
&lt;li&gt;实际上的语法糖—&amp;gt;编译为 JS&lt;/li&gt;
&lt;li&gt;&lt;p&gt;虚拟 DOM&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;单向的数据传输： update 或 unmount 都是从 父亲-&amp;gt;孩子&lt;/li&gt;
&lt;li&gt;预编译和缓存表达式，解析更加高效&lt;/li&gt;
&lt;li&gt;预处理器&lt;/li&gt;
&lt;li&gt;可用于服务器端&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;语法友好&lt;ul&gt;
&lt;li&gt;强大的属性缩写: class={enable: true, hidden: false}&lt;/li&gt;
&lt;li&gt;不需要额外的手动绑定，无需记忆 render，state，constructor 等&lt;/li&gt;
&lt;li&gt;可插值使用: Add #{items.length + 1} 或 class=”item {selectd: true}”&lt;/li&gt;
&lt;li&gt;逻辑代码，可不放在 script 标签内&lt;/li&gt;
&lt;li&gt;可使用部分 ES6（完全使用需结合 Babel）&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;h2 id=&quot;2-mixin&quot;&gt;&lt;a href=&quot;#2-mixin&quot; class=&quot;headerlink&quot; title=&quot;2.mixin&quot;&gt;&lt;/a&gt;2.mixin&lt;/h2&gt;&lt;p&gt;Mixin 可以将公共代码在不同标签之间方便地共享，可以混入 Object 和 new function(){}。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; OptsMixin = &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    init: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.on(&lt;span class=&quot;string&quot;&gt;&#39;updated&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Updated!&#39;&lt;/span&gt;) &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    getOpts: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.opts&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    setOpts: &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;opts, update&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.opts = opts&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;if&lt;/span&gt;(!update) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;            &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.update()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;        &lt;span class=&quot;keyword&quot;&gt;return&lt;/span&gt; &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;my-tag&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;lt;h1&amp;gt;&amp;#123; opts.title &amp;#125;&amp;lt;/h1&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mixin(OptsMixin)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/my-tag&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;声明式 mixin 可在文件之间和项目之间共享 mixin：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;riot.mixin(&lt;span class=&quot;string&quot;&gt;&quot;defaultData&quot;&lt;/span&gt;, &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    author: &lt;span class=&quot;string&quot;&gt;&quot;ddfe&quot;&lt;/span&gt;,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    email: &lt;span class=&quot;string&quot;&gt;&quot;shield@didichuxing.com&quot;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// in custom tag&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.mixin(&lt;span class=&quot;string&quot;&gt;&quot;defaultData&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;3-事件&quot;&gt;&lt;a href=&quot;#3-事件&quot; class=&quot;headerlink&quot; title=&quot;3.事件&quot;&gt;&lt;/a&gt;3.事件&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;自定义标签创建过程：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;创建标签实例&lt;/li&gt;
&lt;li&gt;标签定义中的 JavaScript 被执行&lt;/li&gt;
&lt;li&gt;HTML 中的表达式被首次计算并首次触发 “update” 事件&lt;/li&gt;
&lt;li&gt;标签被加载 (mount) 到页面上，触发 “mount” 事件&lt;/li&gt;
&lt;/ol&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;监听生命周期事件&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;before-mount &lt;/li&gt;
&lt;li&gt;mount&lt;/li&gt;
&lt;li&gt;update（改写上下文数据）&lt;/li&gt;
&lt;li&gt;updated（操作 DOM）&lt;/li&gt;
&lt;li&gt;before-mount&lt;/li&gt;
&lt;li&gt;unmount&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;表达式更新方式：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;当一个事件处理器被调用后自动更新。可以在事件处理器中设置 &lt;code&gt;e.preventUpdate = true&lt;/code&gt; 来禁止这种行为。&lt;/li&gt;
&lt;li&gt;当前标签实例的 &lt;code&gt;this.update()&lt;/code&gt; 方法被调用时&lt;/li&gt;
&lt;li&gt;当前标签的任何一个祖先的 &lt;code&gt;this.update()&lt;/code&gt; 被调用时. 更新从父亲到儿子单向传播。&lt;/li&gt;
&lt;li&gt;当 &lt;code&gt;riot.update()&lt;/code&gt; 方法被调用时, 会更新页面上所有的表达式。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;4-表达式&quot;&gt;&lt;a href=&quot;#4-表达式&quot; class=&quot;headerlink&quot; title=&quot;4.表达式&quot;&gt;&lt;/a&gt;4.表达式&lt;/h2&gt;&lt;p&gt;100%纯 JavaScript：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; title || &lt;span class=&quot;string&quot;&gt;&#39;Untitled&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; results ? &lt;span class=&quot;string&quot;&gt;&#39;ready&#39;&lt;/span&gt; : &lt;span class=&quot;string&quot;&gt;&#39;loading&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;keyword&quot;&gt;new&lt;/span&gt; &lt;span class=&quot;built_in&quot;&gt;Date&lt;/span&gt;() &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; message.length &amp;gt; &lt;span class=&quot;number&quot;&gt;140&lt;/span&gt; &amp;amp;&amp;amp; &lt;span class=&quot;string&quot;&gt;&#39;Message is too long&#39;&lt;/span&gt; &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#123; &lt;span class=&quot;built_in&quot;&gt;Math&lt;/span&gt;.round(rating) &amp;#125;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;可放在 html 节点中，也可作为文本节点嵌入：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;id&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;&lt;/span&gt; /* 属性表达式 */ &amp;#125;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#123; /* 嵌入表达式 */ &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;注：可通过&lt;code&gt;riot.settings.brackets&lt;/code&gt;自定义花括号&lt;/p&gt;
&lt;h2 id=&quot;5-杂烩&quot;&gt;&lt;a href=&quot;#5-杂烩&quot; class=&quot;headerlink&quot; title=&quot;5.杂烩&quot;&gt;&lt;/a&gt;5.杂烩&lt;/h2&gt;&lt;ul&gt;
&lt;li&gt;&lt;p&gt;嵌套标签&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;account&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;subscription&lt;/span&gt;  &lt;span class=&quot;attr&quot;&gt;plan&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;opts.plan&lt;/span&gt; &amp;#125; &lt;span class=&quot;attr&quot;&gt;show_details&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;true&quot;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;account&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;subscription&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123; opts.plan.name &amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;h3&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 取得标签选项&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; plan = opts.plan,&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      show_details = opts.show_details&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;comment&quot;&gt;// 访问父标签实例&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; parent = &lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.parent&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/subscription&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;父标签的参数通过 &lt;code&gt;riot.mount&lt;/code&gt; 方法的参数设置，而子标签的选项通过标签属性来传递。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot.mount(&lt;span class=&quot;string&quot;&gt;&#39;account&#39;&lt;/span&gt;, &amp;#123; plan: &amp;#123; name: &lt;span class=&quot;string&quot;&gt;&#39;ddfe&#39;&lt;/span&gt;, age: &lt;span class=&quot;string&quot;&gt;&#39;4&#39;&lt;/span&gt; &amp;#125; &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;&lt;span class=&quot;regexp&quot;&gt;/script&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;嵌套HTML&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--definition--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;my-tag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;yield&lt;/span&gt;/&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  this.text = &#39;world&#39;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;my-tag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--apply--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;my-tag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&amp;#123; text &amp;#125;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;my-tag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;&amp;lt;!--result--&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;my-tag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Hello &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;world&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;b&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;my-tag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;带有 &lt;code&gt;name&lt;/code&gt; 或 &lt;code&gt;id&lt;/code&gt; 属性的 DOM 元素将自动被绑定到上下文中，可直接访问&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;事件处理器 &lt;/p&gt;
&lt;figure class=&quot;highlight&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;login&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;form onsubmit=&amp;#123; submit &amp;#125;&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;lt;/form&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  // 上面的表单提交时调用此方法&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  submit(e) &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &amp;#125;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;/login&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//e.currentTarget 事件处理器的所属元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//e.target 发起事件的元素&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//e.which 键盘事件中的键值 &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;//e.item 循环中的当前元素&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;渲染条件：&lt;code&gt;if = {expression}&lt;/code&gt; &lt;code&gt;show&lt;/code&gt; &lt;code&gt;hide&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;循环：&lt;code&gt;each = {items}&lt;/code&gt;（对象数组）or &lt;code&gt;each = {name, i in items}&lt;/code&gt;(非对象数组) or &lt;code&gt;each = {name,value in items}&lt;/code&gt;（对象）（不建议使用）&lt;/p&gt;
&lt;p&gt;循环中的每一项将建立一个新的上下文，子标签通过 parent 访问父标签定义的方法和属性。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;使用标准 HTML 元素作为标签&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;ul riot-tag=&lt;span class=&quot;string&quot;&gt;&quot;my-tag&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot.mount(&lt;span class=&quot;string&quot;&gt;&#39;my-tag&#39;&lt;/span&gt;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;服务端渲染&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; riot = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;riot&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; timer = &lt;span class=&quot;built_in&quot;&gt;require&lt;/span&gt;(&lt;span class=&quot;string&quot;&gt;&#39;timer.tag&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; html = riot.render(timer, &amp;#123; start: &lt;span class=&quot;number&quot;&gt;42&lt;/span&gt; &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(html) &lt;span class=&quot;comment&quot;&gt;// &amp;lt;timer&amp;gt;&amp;lt;p&amp;gt;Seconds Elapsed: 42&amp;lt;/p&amp;gt;&amp;lt;/timer&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;6-编译&quot;&gt;&lt;a href=&quot;#6-编译&quot; class=&quot;headerlink&quot; title=&quot;6. 编译&quot;&gt;&lt;/a&gt;6. 编译&lt;/h2&gt;&lt;p&gt;自定义标签会被编译为 JavaScript&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;p&gt;浏览器内编译&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&amp;lt;script src=&lt;span class=&quot;string&quot;&gt;&quot;todo.tag&quot;&lt;/span&gt; type=&lt;span class=&quot;string&quot;&gt;&quot;riot/tag&quot;&lt;/span&gt;&amp;gt;&lt;span class=&quot;xml&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;预编译：riot 命令&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;npm install riot -g&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 编译到当前目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot some.tag&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 编译到目标目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot some.tag some_folder&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 编译到目标路径&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot some.tag some_folder/some.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 将源目录下的所有文件编译至目的目录&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot some/folder path/to/dist&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;# 将源目录下的所有文件编译（合并）到单个js文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot some/folder all-my-tags.js&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;参数：&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-w watch 目录 有变化自动编译&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;-ext html 指定后缀名&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--config config 使用config.js作配置文件&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--type 指定 js 处理器&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;--template 指定 HTML 模板&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;预处理器&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;type&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;coffee&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;undefined&quot;&gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;​&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;h2 id=&quot;7-观察者-Observable（事件触发器）&quot;&gt;&lt;a href=&quot;#7-观察者-Observable（事件触发器）&quot; class=&quot;headerlink&quot; title=&quot;7.观察者 Observable（事件触发器）&quot;&gt;&lt;/a&gt;7.观察者 Observable（事件触发器）&lt;/h2&gt;&lt;p&gt;Riot 提供 Observable 以便组件间通信，实现模块化。&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;20&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;21&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;22&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;23&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;24&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;25&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;26&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;27&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;28&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;29&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;30&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;31&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;32&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;33&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;34&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;35&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;36&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 方法1，创建一个观察者，返回一个实例，之后该对象便可以触发和监听事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; ddfe = riot.observable(&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//方法2，使 ddfe 成为观察者&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot.observable(ddfe);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 监听事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ddfe.on(&lt;span class=&quot;string&quot;&gt;&quot;event1&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data1, data2&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// 监听event1事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// data1 和 data2 是trigger传入的参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;comment&quot;&gt;// data1 = 1, data2 = 2&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data1, data2);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 发布一个事件&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 该事件带有 1 和 2 作为参数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 上面的on(&quot;event1&quot;)的回调fn将会执行&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ddfe.trigger(&lt;span class=&quot;string&quot;&gt;&quot;event1&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 解除 event1 的所有监听，第二个参数可选&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果有第二个参数 [function]，则只解绑该函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ddfe.off(&lt;span class=&quot;string&quot;&gt;&quot;event1&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// one 与 on 类似，只是 one 如果执行过一次，就自动解除绑定&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ddfe.one(&lt;span class=&quot;string&quot;&gt;&quot;event1&quot;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;data1&lt;/span&gt;)&lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(data1);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ddfe.trigger(&lt;span class=&quot;string&quot;&gt;&quot;event1&quot;&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;1&lt;/span&gt;, &lt;span class=&quot;number&quot;&gt;2&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//删除所有事件的所有监听器&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ddfe.off(&lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//对所有的事件删除指定的回调函数&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;ddfe.off(&lt;span class=&quot;string&quot;&gt;&#39;*&#39;&lt;/span&gt;,fn)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h2 id=&quot;8-路由&quot;&gt;&lt;a href=&quot;#8-路由&quot; class=&quot;headerlink&quot; title=&quot;8.路由&quot;&gt;&lt;/a&gt;8.路由&lt;/h2&gt;&lt;p&gt;一个最小化的路由器实现&lt;/p&gt;
&lt;p&gt;功能：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;修改 URL 的 hash 部分&lt;/li&gt;
&lt;li&gt;hash 变化时进行通知&lt;/li&gt;
&lt;li&gt;查看当前 hash&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;API：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;riot.route(callback)&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;riot.route(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;collection, id, action&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//如果 url 变为 customers/987987/edit,则&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//collection = &#39;customers&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//id = &#39;987987&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;//action = &#39;edit&#39;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;riot.route(filter, callback)&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 精确匹配 `/fruit`&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot.route(&lt;span class=&quot;string&quot;&gt;&#39;/fruit&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;The list of fruits&#39;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果 url 变成 `/blog/2015-09/01`,&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 回调的参数将被捕捉成 &#39;2015&#39;, &#39;09&#39; 和 &#39;01&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot.route(&lt;span class=&quot;string&quot;&gt;&#39;/blog/*-*/*&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;year, month, date&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;The page of &#39;&lt;/span&gt; + year + &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; + month + &lt;span class=&quot;string&quot;&gt;&#39;-&#39;&lt;/span&gt; date)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;riot.route.create()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;   返回一个新的路由上下文&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;10&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;11&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;12&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;13&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;14&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;15&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;16&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;17&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;18&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;19&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;first-tag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;First tag&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subRoute = riot.route.create() &lt;span class=&quot;comment&quot;&gt;// 创建新的路由上下文&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    subRoute(&lt;span class=&quot;string&quot;&gt;&#39;/fruit/*&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;/* 公用的部分 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;first-tag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;second-tag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;Second tag&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;p&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;javascript&quot;&gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; subRoute = riot.route.create() &lt;span class=&quot;comment&quot;&gt;// 创建新的路由上下文&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    subRoute(&lt;span class=&quot;string&quot;&gt;&#39;/fruit/apple&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;      &lt;span class=&quot;comment&quot;&gt;/* 个别的部分 */&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &amp;#125;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;script&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;second-tag&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;riot.route(to[, title, shouldReplace])&lt;/code&gt;&lt;/p&gt;
&lt;pre&gt;&lt;code&gt;在内部实现中，
&lt;/code&gt;&lt;/pre&gt;&lt;ul&gt;
&lt;li&gt;如果没有 &lt;code&gt;shouldReplace&lt;/code&gt;, 将使用 &lt;code&gt;history.pushState()&lt;/code&gt;.&lt;/li&gt;
&lt;li&gt;如果有 &lt;code&gt;shouldReplace&lt;/code&gt;, 将使用&lt;code&gt;history.replaceState()&lt;/code&gt;.&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;riot.route.start()&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;   开始监听路由变化，需要手动调用&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;riot.route.start(autoExec)&lt;/code&gt;&lt;/p&gt;
&lt;p&gt;   riot.route.start(true) &amp;lt;=&amp;gt; riot.route.start()+riot.route.exec()&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;riot.route.stop()&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;riot.route.query()&lt;/code&gt;&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;comment&quot;&gt;// 如果 url 变成 `/search?keyword=Apple&amp;amp;limit=30` 将会匹配&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot.route(&lt;span class=&quot;string&quot;&gt;&#39;/search..&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; q = riot.route.query()&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Search keyword: &#39;&lt;/span&gt; + q.keyword)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&#39;Search limit: &#39;&lt;/span&gt; + q.limit)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;)&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;riot.route.base(base)&lt;/code&gt;修改基础路径&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;&lt;code&gt;riot.route.parser(parser[, secondParser])&lt;/code&gt;&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;其他，路由优先级等&lt;/p&gt;
&lt;/li&gt;
&lt;/ol&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;riot.route(&lt;span class=&quot;string&quot;&gt;&#39;/fruit/apple&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* */&lt;/span&gt; &amp;#125;) &lt;span class=&quot;comment&quot;&gt;// 路由-B (1)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot.route(&lt;span class=&quot;string&quot;&gt;&#39;/fruit/orange&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* */&lt;/span&gt; &amp;#125;) &lt;span class=&quot;comment&quot;&gt;// 路由-C (2)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot.route(&lt;span class=&quot;string&quot;&gt;&#39;/fruit/*&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;name&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* */&lt;/span&gt; &amp;#125;) &lt;span class=&quot;comment&quot;&gt;// 路由-A (3)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot.route(&lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* */&lt;/span&gt; &amp;#125;) &lt;span class=&quot;comment&quot;&gt;// 路由-X (3)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot.route(&lt;span class=&quot;string&quot;&gt;&#39;/fruit/*&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* */&lt;/span&gt; &amp;#125;) &lt;span class=&quot;comment&quot;&gt;// 路由-Y (1)&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;riot.route(&lt;span class=&quot;string&quot;&gt;&#39;/sweet/*&#39;&lt;/span&gt;, &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;&lt;/span&gt;) &lt;/span&gt;&amp;#123; &lt;span class=&quot;comment&quot;&gt;/* */&lt;/span&gt; &amp;#125;) &lt;span class=&quot;comment&quot;&gt;// 路由-Z (2)&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;</content>
    
    <summary type="html">
    
      &lt;blockquote&gt;
&lt;p&gt;注：本文基于Riot.js v2.5.0版本&lt;/p&gt;
&lt;/blockquote&gt;
&lt;h2 id=&quot;Riot-js简介&quot;&gt;&lt;a href=&quot;#Riot-js简介&quot; class=&quot;headerlink&quot; title=&quot;Riot.js简介&quot;&gt;&lt;/a&gt;Ri
    
    </summary>
    
      <category term="理论学习" scheme="http://chriscindy.top/categories/%E7%90%86%E8%AE%BA%E5%AD%A6%E4%B9%A0/"/>
    
    
      <category term="Riot.js" scheme="http://chriscindy.top/tags/Riot-js/"/>
    
  </entry>
  
  <entry>
    <title>跨域请求时多出现一条 OPTIONS 请求的原因及解决办法</title>
    <link href="http://chriscindy.top/2016/07/20/%E8%B7%A8%E5%9F%9F%E8%AF%B7%E6%B1%82%E6%97%B6%E5%A4%9A%E5%87%BA%E7%8E%B0%E4%B8%80%E6%9D%A1%20OPTIONS%20%E8%AF%B7%E6%B1%82%E7%9A%84%E5%8E%9F%E5%9B%A0%E5%8F%8A%E8%A7%A3%E5%86%B3%E5%8A%9E%E6%B3%95/"/>
    <id>http://chriscindy.top/2016/07/20/跨域请求时多出现一条 OPTIONS 请求的原因及解决办法/</id>
    <published>2016-07-20T10:19:34.000Z</published>
    <updated>2016-09-08T08:55:15.000Z</updated>
    
    <content type="html">&lt;p&gt;最近在公司项目中与后端联调时遇到了一个很奇怪的问题，前端发出的 DELETE 方法的 Ajax 请求传到服务端就变成了 OPTIONS 请求。由于服务端没有针对 OPTIONS 请求作回应，此时返回的 http 状态码为 405，意为“方法不被允许”（Method not allowed），DELETE 请求自然也是失败。上网查了一番，原理是触发了 W3C 规定的跨域请求时的安全机制。&lt;/p&gt;
&lt;p&gt;W3C 规范中的定义如下：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;To protect resources against cross-origin requests that could not originate from certain user agents before this specification existed a preflight request is made to ensure that the resource is aware of this specification. The result of this request is stored in a preflight result cache.&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;大意就是出于安全考虑，保护资源不接受来自特定客户端的跨域请求，存在预请求来提前通知资源。而具体做法呢？看下面：&lt;/p&gt;
&lt;blockquote&gt;
&lt;p&gt;It gets slightly more complicated if the resource author wants to be able to handle cross-origin requests using methods other than simple methods. In that case the author needs to reply to a preflight request that uses the OPTIONS method and then needs to handle the actual request that uses the desired method (DELETE in this example) and give an appropriate response.&lt;br&gt;服务端想要处理使用简单方法之外的方法进行的跨域请求时，需要对使用OPTIONS方法的预请求进行响应，然后才能处理实际请求。&lt;/p&gt;
&lt;/blockquote&gt;
&lt;p&gt;所谓简单方法，是指：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;只使用 GET, HEAD 或者 POST 请求方法。如果使用 POST 向服务器端传送数据，则数据类型(Content-Type)只能是 application/x-www-form-urlencoded, multipart/form-data 或 text/plain中的一种。&lt;/li&gt;
&lt;li&gt;不会使用自定义请求头（类似于 X-Modified 这种）。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;OPTIONS 是 HTTP/1.1 里的方法，用来获取更多服务器端的信息，是一个不应该对服务器数据造成影响的方法。通过这个方法，客户端可以在采取具体资源请求之前，决定对该资源采取何种必要措施，或者了解服务器的性能。&lt;/p&gt;
&lt;p&gt;到这里，我们对整个情况就很明了了：当 Ajax 跨域请求时，如果 HTTP 方法是非简单方法，则客户端即浏览器会发出 OPTIONS 方法的预请求去询问服务端，在得到允许性质的回应后，才会发送真正的请求；如果服务端对预请求拒绝，则真正的 DELETE 请求等不会发出。&lt;/p&gt;
&lt;p&gt;看到这里，相信各位也知道如何解决该问题了：服务端对 OPTIONS 预请求给出允许回应。不过，需要注意的是，不应该满足所有的 OPTIONS 请求，否则这一安全措施便形同虚设了。最好是建立一套验证机制，对符合条件的客户端请求给出允许回应。至于如何实现，就靠我们的后端小伙伴啦。有兴趣的朋友可以查看 MDN 上的这篇文档：&lt;a href=&quot;https://developer.mozilla.org/zh-CN/docs/Web/HTTP/Access_control_CORS&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;HTTP访问控制(CORS)&lt;/a&gt;&lt;/p&gt;
&lt;p&gt;其他参考文献：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://www.w3.org/TR/cors/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;W3C Cross-Origin Resource Sharing&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://www.tangshuang.net/2271.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;jquery ajax 请求中多出现一次 OPTIONS 请求及其解决办法&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;最近在公司项目中与后端联调时遇到了一个很奇怪的问题，前端发出的 DELETE 方法的 Ajax 请求传到服务端就变成了 OPTIONS 请求。由于服务端没有针对 OPTIONS 请求作回应，此时返回的 http 状态码为 405，意为“方法不被允许”（Method not 
    
    </summary>
    
      <category term="解决方案" scheme="http://chriscindy.top/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="HTTP" scheme="http://chriscindy.top/tags/HTTP/"/>
    
      <category term="Ajax" scheme="http://chriscindy.top/tags/Ajax/"/>
    
      <category term="CORS" scheme="http://chriscindy.top/tags/CORS/"/>
    
  </entry>
  
  <entry>
    <title>[译]使用 Riot，ES6 和 Webpack 构建应用</title>
    <link href="http://chriscindy.top/2016/07/11/%E8%AF%91-%E4%BD%BF%E7%94%A8%20Riot%EF%BC%8CES6%20%E5%92%8C%20Webpack%20%E6%9E%84%E5%BB%BA%E5%BA%94%E7%94%A8/"/>
    <id>http://chriscindy.top/2016/07/11/译-使用 Riot，ES6 和 Webpack 构建应用/</id>
    <published>2016-07-11T03:10:52.000Z</published>
    <updated>2016-09-08T08:55:57.000Z</updated>
    
    <content type="html">&lt;p&gt;在读完 Muut 上 &lt;a href=&quot;https://muut.com/blog/technology/frameworkless-javascript.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Frameworkless JavaScript&lt;/a&gt; 这篇博文后，我遇上了 &lt;a href=&quot;http://riotjs.com/zh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Riot&lt;/a&gt;，请一定先阅读该博文！Muut 的程序员拿出实际行动编写了 &lt;a href=&quot;http://riotjs.com/zh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Riot&lt;/a&gt;，一个 &lt;a href=&quot;https://muut.com/blog/technology/riot-2.0/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;类似React&lt;/a&gt; 的用来构建响应式UI组件的微型库。&lt;/p&gt;
&lt;p&gt;阅读Riot的文档时，令我感触最深的是 Riot 竟如此容易理解——相比 React 来说，在 Riot 里需要学习的术语和概念极少（说实话，和 Polymer 和 Angular 等比起来，Riot 也是十分简单易懂的）。&lt;/p&gt;
&lt;p&gt;为了有助于学习 Riot，我把自己用 React 编写的 &lt;a href=&quot;https://github.com/srackham/flux-backbone-todo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;flux-backbone-todo&lt;/a&gt; 搬运到了用 Riot 编写的 &lt;a href=&quot;https://github.com/srackham/riot-todo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Riot Todo app&lt;/a&gt; 上。这篇博文就是我记录这次重构经历的笔记的合集。&lt;/p&gt;
&lt;p&gt;如果觉得文章太长，这里是精简版：&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;p&gt;Riot 确实践行了它最小化的座右铭。Todo 应用的 Riot 版本（未压缩）只有很小的 32 KB。作为对比，React 版本则达到了 964 KB 之多（即使减去在 Riot 版本中未使用到的 Backbone 和 jQuery，React 版本仍然有 600 KB）。不管你怎么看，这都是一个巨大的差异。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;&lt;p&gt;Riot 有那种很少见的“刚刚好”的感觉，使用起来非常愉悦。&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;Riot 是一个相对较新的方案，因此我没有找到其在大一些的项目中的性能方面的统计数据。在大型项目中 Riot 表现究竟怎样尚未有定论，我希望它能够做的很好。&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;如果你对 Riot 还不熟悉，可以先去浏览一下 &lt;a href=&quot;http://riotjs.com/zh/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Riot官网&lt;/a&gt;——开发文档是第一课。我将列出一些我所学到的但是阅读文档时不一定很明显易懂的内容，而不会去讨论 Riot 是如何工作的。&lt;/p&gt;
&lt;h2 id=&quot;在-Riot-中使用-ES6&quot;&gt;&lt;a href=&quot;#在-Riot-中使用-ES6&quot; class=&quot;headerlink&quot; title=&quot;在 Riot 中使用 ES6&quot;&gt;&lt;/a&gt;在 Riot 中使用 ES6&lt;/h2&gt;&lt;p&gt;&lt;a href=&quot;https://github.com/srackham/riot-todo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;示例的应用&lt;/a&gt;采用 ES6 编写，我使用 &lt;a href=&quot;http://6to5.org&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;6to5&lt;/a&gt; 转译器将其转换为 ES5 代码，使用 &lt;a href=&quot;http://webpack.github.io&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Webpack&lt;/a&gt; 将编译后的代码以及需要的库一起打包。这种方式使得联结 JavaScript 模块成为必要——当你理解最新的 ES6 中 &lt;code&gt;import&lt;/code&gt; 和 &lt;code&gt;export&lt;/code&gt; 表述的优势时（看这个&lt;a href=&quot;https://github.com/srackham/riot-todo/blob/master/src/index.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;示例&lt;/a&gt;），你就会知道使用 ES6 编写代码是非常棒的。&lt;/p&gt;
&lt;p&gt;Webpack通过&lt;a href=&quot;https://github.com/srackham/riot-todo/blob/master/webpack.config.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;配置&lt;/a&gt;可以使用 &lt;code&gt;6to5 loader&lt;/code&gt; 将 ES6 源码自动转换成 CommonJS 格式的 ES5 模块，再将其打包至一个单独的 &lt;code&gt;bundle.js&lt;/code&gt; 文件。&lt;/p&gt;
&lt;h2 id=&quot;为什么我不使用-Riot-的-tag-文件&quot;&gt;&lt;a href=&quot;#为什么我不使用-Riot-的-tag-文件&quot; class=&quot;headerlink&quot; title=&quot;为什么我不使用 Riot 的 .tag 文件&quot;&gt;&lt;/a&gt;为什么我不使用 Riot 的 &lt;code&gt;.tag&lt;/code&gt; 文件&lt;/h2&gt;&lt;p&gt;Riot 标签文件是指包含 HTML 标记以及 JavaScript UI 逻辑的 HTML 模板。如果你已经浏览过了上面提到的 &lt;a href=&quot;https://github.com/srackham/riot-todo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Todo应用&lt;/a&gt;，你可能会疑惑标签文件在哪里——答案是我已经不再使用它们，并且更喜欢用 JavaScript 来替代之。去除 &lt;code&gt;.tag&lt;/code&gt; 文件简化了我的编码、加工和工作流程。对我来说，标签文件的复杂性和局限性大于它任何可以感知到的优点。&lt;/p&gt;
&lt;p&gt;这并不是对 Riot 的一种批判。对标签文件来说，灵活的地方在于它完全可选而非强制使用，在此记录我不使用它的原因。&lt;/p&gt;
&lt;p&gt;当你审视编译后的 JavaScript 代码时，你会看到 Riot 标签文件其实是一层轻微的语法糖.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;它添加了额外的概念层——新的或者比较新的语法和语义需要学习。&lt;/li&gt;
&lt;li&gt;它添加了额外的编译步骤。&lt;/li&gt;
&lt;li&gt;标签文件编译器指定了你可以使用的语言和模板（CoffeeScript、ES6和Jade），这有悖于“使用你最喜欢的工具”的理念。&lt;/li&gt;
&lt;li&gt;标签构造主体的逻辑脱离上下文：&lt;ul&gt;
&lt;li&gt;这使得标签文件无法被编辑器/IDE 的代码检测以及其他的工具处理&lt;/li&gt;
&lt;li&gt;涉及 &lt;code&gt;this&lt;/code&gt; 时，脱离上下文意味着代码不是合法的 JavaScript 并且在编辑器/IDE 中会报错&lt;/li&gt;
&lt;/ul&gt;
&lt;/li&gt;
&lt;li&gt;目前没有对模块化（CommonJS，AMD）标签文件编译为普通 JavaScript 的支持。&lt;/li&gt;
&lt;li&gt;标签文件需要构建工具（比如 Webpack 和 Browserify）直接使用标签转换器来进行转换。&lt;/li&gt;
&lt;li&gt;&lt;p&gt;类似 ES6 的构造方法很棒但它们不是合法的 JavaScript 并且很可能总是成为持续混乱（语法和语义上）的来源。你可以使用 ES6 的&lt;em&gt;箭头函数&lt;/em&gt;以几乎相同的简洁程度来获得相同的语义（拥有词法作用域的 &lt;code&gt;this&lt;/code&gt;），举例如下：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.add = (e) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;var&lt;/span&gt; input = e.target[&lt;span class=&quot;number&quot;&gt;0&lt;/span&gt;]&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.items.push(input.value)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;	input.value = &lt;span class=&quot;string&quot;&gt;&#39;&#39;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这里有一个使用 ES6 模板字符串和箭头函数的 ES6 形式的 JavaScript 标签文件的&lt;a href=&quot;https://github.com/srackham/riot-todo/blob/0.1.1/src/tags.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;例子&lt;/a&gt;。&lt;/p&gt;
&lt;p&gt;ES6 模板字符串提高了标签 HTML 模板的可读性。相似的，如果你使用的是 CoffeeScript，那么你可以使用 CoffeeScript 块字符串。&lt;a href=&quot;http://facebook.github.io/jsx/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;JSX&lt;/a&gt; 是另一种可选项——React 的 JSX 转换器可以经过修改然后生成字符串文本，这样你就可以获得现有的 JSX 工具的支持。&lt;/p&gt;
&lt;h2 id=&quot;Riot和React的基本区别&quot;&gt;&lt;a href=&quot;#Riot和React的基本区别&quot; class=&quot;headerlink&quot; title=&quot;Riot和React的基本区别&quot;&gt;&lt;/a&gt;Riot和React的基本区别&lt;/h2&gt;&lt;p&gt;最重要的区别在于 UI 标记模板是如何声明的：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 React 中 UI 标记模板是在你的 JavaScript 源码中生成的（使用 JSX 语言的扩展）。&lt;/li&gt;
&lt;li&gt;Riot 则反转了 React 的模型，将标记和逻辑都放在 HTML（标签）文件中。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;这种反转的结果是 React 模板 DSL（领域特定语言）就是 JavaScript，而 Riot 依赖自定义的模板 DSL（采用自定义标签实现）。下面是两个简化的从一个 todo 事项的数组中生成一个列表的例子，第一个采用 React JavaScript编写，第二个是等价的 Riot 标签标记形式：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  todos.map(todo =&amp;gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;TodoItemComponent&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;todo&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&amp;#123;todo&amp;#125;&lt;/span&gt; /&amp;gt;&lt;/span&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;)&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;each&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;todo in todos&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;    &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;todo-item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;todo&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;todo&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;第一个例子中使用了 JavaScript 的 &lt;code&gt;map&lt;/code&gt; 函数来生成一个 &lt;code&gt;&amp;lt;li&amp;gt;&lt;/code&gt; 元素的列表；第二个例子则使用了 Riot 自定义的 &lt;code&gt;each&lt;/code&gt; 模板属性。&lt;/p&gt;
&lt;p&gt;Steve Luscher 在这个&lt;a href=&quot;https://www.youtube.com/watch?v=rI0GQc__0SM#t=1325&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;视频&lt;/a&gt;的结尾解释了为何他认为 JavaScript 比自定义模板 DSL 更优秀——你不仅需要学习一门自定义的 DSL，而且还要拘泥于这套 DSL 提供的特性的束缚。对于像上面这样较小的普通用例来说，两种方式其实没太多选择余地，但是在编写更大的高度动态化的 UI 组件时，React 的 JavaScript 方式的威力和灵活性就明显更优越了。&lt;/p&gt;
&lt;h2 id=&quot;小贴士&quot;&gt;&lt;a href=&quot;#小贴士&quot; class=&quot;headerlink&quot; title=&quot;小贴士&quot;&gt;&lt;/a&gt;小贴士&lt;/h2&gt;&lt;h3 id=&quot;避免自关闭的XHTML风格的标签&quot;&gt;&lt;a href=&quot;#避免自关闭的XHTML风格的标签&quot; class=&quot;headerlink&quot; title=&quot;避免自关闭的XHTML风格的标签&quot;&gt;&lt;/a&gt;避免自关闭的XHTML风格的标签&lt;/h3&gt;&lt;p&gt;不要用&lt;code&gt;/&amp;gt;&lt;/code&gt;来关闭标签，因为它不总是立刻就能关闭标签。当以 HTML5 元素对待时，&lt;code&gt;&amp;lt;foo /&amp;gt;&lt;/code&gt; 表示&lt;code&gt;&amp;lt;foo&amp;gt;&lt;/code&gt;（然而在 XHTML 中&lt;code&gt;&amp;lt;foo /&amp;gt;&lt;/code&gt;表示&lt;code&gt;&amp;lt;foo&amp;gt;&amp;lt;/foo&amp;gt;&lt;/code&gt;），换言之，HTML5 会忽略&lt;code&gt;/&lt;/code&gt;字符。有关这个话题可以在 &lt;a href=&quot;http://stackoverflow.com/questions/9845011/are-custom-elements-valid-html5/9845124#9845124&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stackoverflow&lt;/a&gt; 上查看更多讨论。还可以查看下面两处内容：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;&lt;a href=&quot;http://riotjs.com/forum/#!/using:closing-html5-tags-with-&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;使用&lt;code&gt;/&amp;gt;&lt;/code&gt;关闭HTML5标签可能造成无法预料的结果&lt;/a&gt;&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://riotjs.com/forum/#!/using:misplaced-form-end-tag&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;放错位置的表单结束标签&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;
&lt;h3 id=&quot;绑定标签事件处理器到-this-上&quot;&gt;&lt;a href=&quot;#绑定标签事件处理器到-this-上&quot; class=&quot;headerlink&quot; title=&quot;绑定标签事件处理器到 this 上&quot;&gt;&lt;/a&gt;绑定标签事件处理器到 this 上&lt;/h3&gt;&lt;p&gt;绑定标签事件处理器到 this 上，以确保这些处理器总是和标签文本一起清除（可选的方式是使用约定俗成的&lt;code&gt;var self = this&lt;/code&gt;）。比如：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clear = &lt;span class=&quot;function&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;function&lt;/span&gt;(&lt;span class=&quot;params&quot;&gt;e&lt;/span&gt;) &lt;/span&gt;&amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  dispatcher.trigger(dispatcher.CLEAR_TODOS);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;.bind(&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;使用 ES6 中的词法作用域绑定的箭头函数也可以获得相同的效果：&lt;/p&gt;
&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;keyword&quot;&gt;this&lt;/span&gt;.clear = (e) =&amp;gt; &amp;#123;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;  dispatcher.trigger(dispatcher.CLEAR_TODOS);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&amp;#125;;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;关于循环项&quot;&gt;&lt;a href=&quot;#关于循环项&quot; class=&quot;headerlink&quot; title=&quot;关于循环项&quot;&gt;&lt;/a&gt;关于循环项&lt;/h3&gt;&lt;p&gt;使用&lt;code&gt;each={item in items}&lt;/code&gt;结构将当前的循环项目传递给自定义的子标签。在下面的例子中，自定义的&lt;code&gt;todo-item&lt;/code&gt;标签内的代码可以使用&lt;code&gt;opts.todo&lt;/code&gt;来获取当前的 todo 项：&lt;/p&gt;
&lt;figure class=&quot;highlight html&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;each&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;todo in opts.store.todos&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;   &lt;span class=&quot;tag&quot;&gt;&amp;lt;&lt;span class=&quot;name&quot;&gt;todo-item&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;store&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;parent.opts.store&amp;#125;&quot;&lt;/span&gt; &lt;span class=&quot;attr&quot;&gt;todo&lt;/span&gt;=&lt;span class=&quot;string&quot;&gt;&quot;&amp;#123;todo&amp;#125;&quot;&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;li&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;tag&quot;&gt;&amp;lt;/&lt;span class=&quot;name&quot;&gt;ul&lt;/span&gt;&amp;gt;&lt;/span&gt;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;h3 id=&quot;命名空间事件名称&quot;&gt;&lt;a href=&quot;#命名空间事件名称&quot; class=&quot;headerlink&quot; title=&quot;命名空间事件名称&quot;&gt;&lt;/a&gt;命名空间事件名称&lt;/h3&gt;&lt;p&gt;使用命名空间加冒号的约定来组织应用的事件名称，比如&lt;code&gt;admin:edit&lt;/code&gt;，&lt;code&gt;admin:delete&lt;/code&gt;，&lt;code&gt;admin:new&lt;/code&gt;等。&lt;/p&gt;
&lt;h3 id=&quot;可以在-CSS-文件中使用自定义标签&quot;&gt;&lt;a href=&quot;#可以在-CSS-文件中使用自定义标签&quot; class=&quot;headerlink&quot; title=&quot;可以在 CSS 文件中使用自定义标签&quot;&gt;&lt;/a&gt;可以在 CSS 文件中使用自定义标签&lt;/h3&gt;&lt;p&gt;自定义标签最终会被渲染生成到 DOM 中，因此它们可以使用在 CSS 选择器和 DOM 审查中使用，这里是一个&lt;a href=&quot;https://github.com/srackham/riot-todo/blob/master/dist/index.css&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;例子&lt;/a&gt;。&lt;/p&gt;
&lt;h3 id=&quot;调试&quot;&gt;&lt;a href=&quot;#调试&quot; class=&quot;headerlink&quot; title=&quot;调试&quot;&gt;&lt;/a&gt;调试&lt;/h3&gt;&lt;p&gt;当用 Webpack 打包时你需要使用&lt;a href=&quot;https://github.com/srackham/riot-todo/blob/master/webpack.config.js&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;开发工具 source-map 配置选项&lt;/a&gt;来为你打包后的应用生成 &lt;a href=&quot;http://www.html5rocks.com/en/tutorials/developertools/sourcemaps/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;source map&lt;/a&gt; 文件。这使得你可以在 ES6 的源码文件中进行调试。&lt;/p&gt;
&lt;p&gt;当需要浏览和调试源码时，打开浏览器的 &lt;em&gt;Sources 窗口&lt;/em&gt;然后定位到&lt;code&gt;webpack:///.&lt;/code&gt;文件夹：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;在 Firefox 中：打开 Debugger（Ctrl+Shift+S）。&lt;/li&gt;
&lt;li&gt;在 Google Chrome 中：打开 Console（Ctrl+Shift+J）然后点击 &lt;em&gt;Sources&lt;/em&gt; 标签来查看源码面板。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;我不是很喜欢调试程序和设置断点——大多数情况下我仅仅会有策略地在代码中放置暂时性的&lt;code&gt;console.log()&lt;/code&gt;。&lt;/p&gt;
&lt;h2 id=&quot;未来蓝图&quot;&gt;&lt;a href=&quot;#未来蓝图&quot; class=&quot;headerlink&quot; title=&quot;未来蓝图&quot;&gt;&lt;/a&gt;未来蓝图&lt;/h2&gt;&lt;p&gt;Riot（类似 React）是一个 UI 库而不是一个框架。这非常棒（相对于大包大揽的框架来说，我更喜欢小而精的库的集合），但是对于具有一定复杂度的应用来说就需要条理清晰的高级的结构（一个体系结构）来提高可伸缩性、可发展性和可维护性。&lt;a href=&quot;https://www.npmjs.com/package/flux&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Flux&lt;/a&gt; 为类似React的应用增加了体系结构的选择。我喜欢 Flux，因为它很容易理解并且它能给人一种很直观的感觉（并非出于任何理论上的信仰）。&lt;a href=&quot;https://github.com/srackham/riot-todo&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Riot Todo app&lt;/a&gt; 使用了名为 &lt;a href=&quot;https://github.com/jimsparkman/RiotControl&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;RiotControl&lt;/a&gt; 的 Flux 风格的 dispatcher（经过轻微修改）来实现 Flux 体系结构。&lt;/p&gt;
&lt;blockquote&gt;&lt;p&gt;原文出处：&lt;/p&gt;
&lt;footer&gt;&lt;strong&gt;srackham&lt;/strong&gt;&lt;cite&gt;&lt;a href=&quot;http://blog.srackham.com/posts/riot-es6-webpack-apps/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Building Apps with Riot, ES6 and Webpack&lt;/a&gt;&lt;/cite&gt;&lt;/footer&gt;&lt;/blockquote&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;在读完 Muut 上 &lt;a href=&quot;https://muut.com/blog/technology/frameworkless-javascript.html&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Frameworkless JavaScri
    
    </summary>
    
      <category term="技术研究" scheme="http://chriscindy.top/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="Riot.js" scheme="http://chriscindy.top/tags/Riot-js/"/>
    
  </entry>
  
  <entry>
    <title>Composition Event</title>
    <link href="http://chriscindy.top/2016/07/11/Composition-Event/"/>
    <id>http://chriscindy.top/2016/07/11/Composition-Event/</id>
    <published>2016-07-11T02:26:38.000Z</published>
    <updated>2016-08-22T10:10:38.000Z</updated>
    
    <content type="html">&lt;p&gt;Composition Event，中文译为复合事件，是 DOM 3 级事件中新添加的一类事件类型，用于处理 IME 的输入序列。IME（Input Method Editor，输入法编辑器）可以让用户输入在物理键盘上找不到的字符。复合事件就是针对检测和处理这种输入而设计的。也因为以上所述原因，复合事件很少为通常使用拉丁系语言输入的开发者所知（因为拉丁字母都能通过物理键盘输入）。当然，即使是使用非拉丁系语言比如中文作为输入的开发者，也不见得知道复合事件，因为开发中用到该种事件类型的情况比较少见。&lt;/p&gt;
&lt;p&gt;IME 复合系统的工作原理如下：缓存用户的键盘输入，直到一个字符被选中后才确定输入。缓存的键盘输入会暂时展示在输入框中，但不会真正被插入到 DOM 中。如下图所示。但是如果在复合事件的过程中改变了输入框的值（比如切换了输入法或者直接按下 enter 键），复合事件将提前结束，同时缓存的键盘输入值将会插入到输入框中。&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww3.sinaimg.cn/large/72f96cbagw1f5pr65nfcxj20zi09cwfq.jpg&quot; alt=&quot;10:21:17.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;复合事件类型包含以下几种事件：&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;compositionstart：当 IME 的文本复合系统打开时触发。&lt;/li&gt;
&lt;li&gt;compositionend：在 IME 的文本复合系统关闭即用户选中了字符并确定输入时触发，表示返回正常键盘的输入状态。&lt;br&gt;-compositionupdate：在 compositionstart 事件触发后，compositionend 事件触发前这段时间内，每次向输入字段中进行输入时均会触发。&lt;/li&gt;
&lt;/ul&gt;
&lt;p&gt;注：input 事件将在复合事件后触发。&lt;/p&gt;
&lt;p&gt;但是，实际情况与理想还是有一定距离的，复合事件的兼容性比较一般。下图是 MDN 中列出的兼容性表现，详情可见 &lt;a href=&quot;https://developer.mozilla.org/en-US/docs/Web/API/CompositionEvent&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;MDN&lt;/a&gt;:&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/72f96cbagw1f5pr91ls0nj21420dg75t.jpg&quot; alt=&quot;10:24:08.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;&lt;img src=&quot;http://ww1.sinaimg.cn/large/72f96cbagw1f5pr973kpuj214s0dtabp.jpg&quot; alt=&quot;10:24:13.jpg&quot;&gt;&lt;/p&gt;
&lt;p&gt;综上，在使用复合事件处理 input 相关的问题时，仍然需要慎重。&lt;/p&gt;
&lt;p&gt;注：本文参考尤雨溪博客中 &lt;a href=&quot;http://blog.evanyou.me/2014/01/03/composition-event/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;DOM COMPOSITION EVENTS COMPATIBILITY NOTES&lt;/a&gt; 一文。&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;Composition Event，中文译为复合事件，是 DOM 3 级事件中新添加的一类事件类型，用于处理 IME 的输入序列。IME（Input Method Editor，输入法编辑器）可以让用户输入在物理键盘上找不到的字符。复合事件就是针对检测和处理这种输入而设计的
    
    </summary>
    
      <category term="技术研究" scheme="http://chriscindy.top/categories/%E6%8A%80%E6%9C%AF%E7%A0%94%E7%A9%B6/"/>
    
    
      <category term="JavaScript" scheme="http://chriscindy.top/tags/JavaScript/"/>
    
  </entry>
  
  <entry>
    <title>两个 Git 帐号如何在一台电脑上共存</title>
    <link href="http://chriscindy.top/2016/07/08/%E4%B8%A4%E4%B8%AA%20Git%20%E5%B8%90%E5%8F%B7%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E4%B8%8A%E5%85%B1%E5%AD%98/"/>
    <id>http://chriscindy.top/2016/07/08/两个 Git 帐号如何在一台电脑上共存/</id>
    <published>2016-07-08T08:11:59.000Z</published>
    <updated>2016-09-08T08:55:43.000Z</updated>
    
    <content type="html">&lt;p&gt;相信很多开发者都会遇到在自己的电脑上使用不止一个 git 帐号的情况。一个一般是自己的 github 帐号，另一个则是公司的 git 帐号，比如 gitlab、bitbucket 等。如果采用 https 方式通信，那么 git 帐号间不会有冲突，但你在每次 pull、push 的时候都要输入帐号密码，十分繁琐。而且当代码库达到十分庞大的规模时，如果仍然采用 https 方式，在 git pull 时可能出现超时不响应的情况，此时只能采用 ssh 方式。ssh 在配置完 ssh key 后使用起来很方便，但是 git 帐号间可能出现冲突，这时候该如何解决呢？&lt;br&gt;配置 ssh key 的方式此处不再赘述，假设 &lt;code&gt;.ssh&lt;/code&gt; 文件夹下有 id_rsa、id_rsa.pub、didi_id_rsa、didi_id_rsa.pub，分别对应个人 github 帐号私钥公钥以及公司 git 帐号私钥公钥。如果不进行设置，使用 github 账号时没有问题，但是使用公司账号时，由于默认情况下私钥存放在 &lt;code&gt;id_rsa&lt;/code&gt; 文件中，因此 git 仍会尝试用 id_rsa 中而不是 didi_id_rsa 中的私钥去与服务器上添加的公钥进行比对，自然而然会报错。通常这种情况下 git 会让你输入密码，笔者连续三次输入密码错误（其实根本不知道该密码为何物），报错，Permission denied。&lt;br&gt;网络上的解决方案普遍为在 ssh 的配置文件中加入以下字段：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Host github.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; hostname gitlab.zjut.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; User Boy-A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; IdentityFile /User/&amp;lt;yourusername&amp;gt;/.ssh/id_rsa&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Host git.xiaojukeji.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; hostname git.xiaojukeji.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; User Boy-B&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; IdentityFile /User/&amp;lt;yourusername&amp;gt;/.ssh/didi_id_rsa&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该文件的主要作用就是指明各个 git 帐号对应的 User 以及 IdentityFile 的文件位置。当配置完毕后，在各个项目 repo 中应用自己的用户名以及邮箱：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.取消 global&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global --unset user.name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global --unset user.email&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.设置每个项目 repo 的自己的 user.email&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config  user.email &amp;quot;xxxx@xx.com&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config  user.name &amp;quot;ddfe&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此，各个 git 帐号间就可以“井水不犯河水”了。&lt;/p&gt;
&lt;p&gt;但是，最麻烦的地方其实并不在这里，而是这个配置文件究竟位于何处。根据网友的分享，Window 系统中，该配置信息存放在名为 config 的文件中，位置在 &lt;code&gt;~/.ssh/&lt;/code&gt; 目录下，而在Linux/Unix系统中配置信息则保存在 ssh_config 文件中，至于位置，众说纷纭。笔者使用的是 macOS 系统，尝试用 “ssh -vT git@git.xiaojukeji.com” 去查看 ssh 连接主机的 debug 信息，终于发现了头绪，debug信息的第二行如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;debug1: Reading configuration data /etc/ssh/ssh_config&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;终于找到了文件的位置！修改之，大功告成！&lt;/p&gt;
&lt;h2 id=&quot;总结：&quot;&gt;&lt;a href=&quot;#总结：&quot; class=&quot;headerlink&quot; title=&quot;总结：&quot;&gt;&lt;/a&gt;总结：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用命令 “ssh -vT git@xxx.com” 查看 ssh_config 文件的位置&lt;/li&gt;
&lt;li&gt;进入 ssh_config 文件，配置各个 git 帐号的 User 以及 IdentityFIle&lt;/li&gt;
&lt;li&gt;在各个项目中配置好 user.name 以及 user.email&lt;/li&gt;
&lt;li&gt;在各个 git 帐号间尽情穿梭吧~&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多开发者都会遇到在自己的电脑上使用不止一个 git 帐号的情况。一个一般是自己的 github 帐号，另一个则是公司的 git 帐号，比如 gitlab、bitbucket 等。如果采用 https 方式通信，那么 git 帐号间不会有冲突，但你在每次 pull、pu
    
    </summary>
    
      <category term="解决方案" scheme="http://chriscindy.top/categories/%E8%A7%A3%E5%86%B3%E6%96%B9%E6%A1%88/"/>
    
    
      <category term="Git" scheme="http://chriscindy.top/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://chriscindy.top/2016/07/08/Hello%20World/"/>
    <id>http://chriscindy.top/2016/07/08/Hello World/</id>
    <published>2016-07-08T03:25:04.000Z</published>
    <updated>2016-08-22T10:15:21.000Z</updated>
    
    <content type="html">&lt;p&gt;恩，这是 hexo 建好后默认的第一篇博文，没有想过删除它，因为我觉得对于这样一个有纪念意义的时刻，应该有一篇文章能够记录一下。&lt;/p&gt;
&lt;p&gt;没错，终于有自己可以写文章的地方了，感觉就像是终于有了一个只属于自己的小窝，这种美妙的感觉难以言表。从今以后，就在这里分享技术，感悟生活啦。&lt;/p&gt;
&lt;p&gt;配置 Hexo 的过程并不困难，就是有些繁琐。之前选用了一个比较小众但很清新的主题 &lt;a href=&quot;https://github.com/ahonn/hexo-theme-even&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;even&lt;/a&gt;，但是发现有各种功能上的缺失，终于还是决定回到最强势最完善的 NexT 上，折腾一圈，安装完各种插件，看着博客的功能慢慢丰满起来，虽然没有太大的难度，但是仍有一种满满的成就感。&lt;/p&gt;
&lt;p&gt;所以，Hello World，向成为前端大拿努力！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;恩，这是 hexo 建好后默认的第一篇博文，没有想过删除它，因为我觉得对于这样一个有纪念意义的时刻，应该有一篇文章能够记录一下。&lt;/p&gt;
&lt;p&gt;没错，终于有自己可以写文章的地方了，感觉就像是终于有了一个只属于自己的小窝，这种美妙的感觉难以言表。从今以后，就在这里分享技术，感
    
    </summary>
    
      <category term="生活感悟" scheme="http://chriscindy.top/categories/%E7%94%9F%E6%B4%BB%E6%84%9F%E6%82%9F/"/>
    
    
      <category term="里程碑" scheme="http://chriscindy.top/tags/%E9%87%8C%E7%A8%8B%E7%A2%91/"/>
    
  </entry>
  
</feed>
