<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>sunflower-&gt;FE</title>
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2016-07-08T08:11:59.000Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>ChrisCindy</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>两个Git帐号如何在一台电脑上共存</title>
    <link href="http://yoursite.com/2016/07/08/%E4%B8%A4%E4%B8%AAGit%E5%B8%90%E5%8F%B7%E5%A6%82%E4%BD%95%E5%9C%A8%E4%B8%80%E5%8F%B0%E7%94%B5%E8%84%91%E4%B8%8A%E5%85%B1%E5%AD%98/"/>
    <id>http://yoursite.com/2016/07/08/两个Git帐号如何在一台电脑上共存/</id>
    <published>2016-07-08T08:11:59.000Z</published>
    <updated>2016-07-08T08:11:59.000Z</updated>
    
    <content type="html">&lt;p&gt;相信很多开发者都会遇到在自己的电脑上使用不止一个git帐号的情况。一个一般是自己的github帐号，另一个则是公司的git帐号，比如gitlab、bitbucket等。如果采用https方式通信，那么git帐号间不会有冲突，但你在每次pull、push的时候都要输入帐号密码，十分繁琐。而且当代码库达到十分庞大的规模时，如果仍然采用https方式，在git pull时可能出现超时不响应的情况，此时只能采用ssh方式。ssh在配置完ssh key后使用起来很方便，但是git帐号间可能出现冲突，这时候该如何解决呢？&lt;/p&gt;
&lt;p&gt;配置ssh key的方式此处不再赘述，假设.ssh文件夹下有id_rsa、id_rsa.pub、didi_id_rsa、didi_id_rsa.pub，分别对应个人github帐号私钥公钥以及公司git帐号私钥公钥。如果不进行设置，使用github账号时没有问题，但是使用公司账号时，由于默认情况下私钥存放在id_rsa文件中，因此git仍会尝试用id_rsa中而不是didi_id_rsa中的私钥去与服务器上添加的公钥进行比对，自然而然会报错。通常这种情况下git会让你输入密码，笔者连续三次输入密码错误（其实根本不知道该密码为何物），报错，Permission denied。&lt;/p&gt;
&lt;p&gt;网络上的解决方案普遍为在ssh的配置文件中加入以下字段：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;8&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;9&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;Host github.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; hostname gitlab.zjut.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; User Boy-A&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; IdentityFile /User/&amp;lt;yourusername&amp;gt;/.ssh/id_rsa&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; &lt;/div&gt;&lt;div class=&quot;line&quot;&gt;Host git.xiaojukeji.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; hostname git.xiaojukeji.com&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; User Boy-B&lt;/div&gt;&lt;div class=&quot;line&quot;&gt; IdentityFile /User/&amp;lt;yourusername&amp;gt;/.ssh/didi_id_rsa&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;该文件的主要作用就是指明各个git帐号对应的User以及IdentityFile的文件位置。当配置完毕后，在各个项目repo中应用自己的用户名以及邮箱：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;4&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;5&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;6&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;7&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1.取消global&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global --unset user.name&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config --global --unset user.email&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2.设置每个项目repo的自己的user.email&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config  user.email &amp;quot;xxxx@xx.com&amp;quot;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;git config  user.name &amp;quot;ddfe&amp;quot;&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;如此，各个git帐号间就可以“井水不犯河水”了。&lt;/p&gt;
&lt;p&gt;但是，最麻烦的地方其实并不在这里，而是这个配置文件究竟位于何处。根据网友的分享，Window系统中，该配置信息存放在名为config的文件中，位置在~/.ssh/目录下，而在Linux/Unix系统中配置信息则保存在ssh_config文件中，至于位置，众说纷纭。笔者使用的是macOS系统，尝试用“ssh -vT git@git.xiaojukeji.com”去查看ssh连接主机的debug信息，终于发现了头绪，debug信息的第二行如下：&lt;/p&gt;
&lt;figure class=&quot;highlight plain&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;debug1: Reading configuration data /etc/ssh/ssh_config&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;
&lt;p&gt;终于找到了文件的位置！修改之，大功告成！&lt;/p&gt;
&lt;h2 id=&quot;总结：&quot;&gt;&lt;a href=&quot;#总结：&quot; class=&quot;headerlink&quot; title=&quot;总结：&quot;&gt;&lt;/a&gt;总结：&lt;/h2&gt;&lt;ol&gt;
&lt;li&gt;使用命令“ssh -vT git@xxx.com”查看ssh_config文件的位置&lt;/li&gt;
&lt;li&gt;进入ssh_config文件，配置各个git帐号的User以及IdentityFIle&lt;/li&gt;
&lt;li&gt;在各个项目中配置好user.name以及user.email&lt;/li&gt;
&lt;li&gt;在各个git帐号间尽情穿梭吧~&lt;/li&gt;
&lt;/ol&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;相信很多开发者都会遇到在自己的电脑上使用不止一个git帐号的情况。一个一般是自己的github帐号，另一个则是公司的git帐号，比如gitlab、bitbucket等。如果采用https方式通信，那么git帐号间不会有冲突，但你在每次pull、push的时候都要输入帐号密码
    
    </summary>
    
    
      <category term="Git" scheme="http://yoursite.com/tags/Git/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2016/07/08/Hello%20World/"/>
    <id>http://yoursite.com/2016/07/08/Hello World/</id>
    <published>2016-07-08T03:25:04.000Z</published>
    <updated>2016-07-08T07:02:51.000Z</updated>
    
    <content type="html">&lt;p&gt;恩，这是hexo建好后默认的第一篇博文，没有想过删除它，因为我觉得对于这样一个有纪念意义的时刻，应该有一篇文章能够记录一下。&lt;/p&gt;
&lt;p&gt;没错，终于有自己可以写文章的地方了，感觉就像是终于有了一个只属于自己的小窝，这种美妙的感觉难以言表。从今以后，就在这里分享技术，感悟生活啦。&lt;/p&gt;
&lt;p&gt;配置Hexo的过程并不困难，就是有些繁琐。之前选用了一个比较小众但很清新的主题&lt;a href=&quot;https://github.com/ahonn/hexo-theme-even&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;even&lt;/a&gt;，但是发现有各种功能上的缺失，终于还是决定回到最强势最完善的NexT上，折腾一圈，安装完各种插件，看着博客的功能慢慢丰满起来，虽然没有太大的难度，但是仍有一种满满的成就感。&lt;/p&gt;
&lt;p&gt;所以，Hello World，向成为前端大拿努力！&lt;/p&gt;
</content>
    
    <summary type="html">
    
      &lt;p&gt;恩，这是hexo建好后默认的第一篇博文，没有想过删除它，因为我觉得对于这样一个有纪念意义的时刻，应该有一篇文章能够记录一下。&lt;/p&gt;
&lt;p&gt;没错，终于有自己可以写文章的地方了，感觉就像是终于有了一个只属于自己的小窝，这种美妙的感觉难以言表。从今以后，就在这里分享技术，感悟生
    
    </summary>
    
    
      <category term="里程碑" scheme="http://yoursite.com/tags/%E9%87%8C%E7%A8%8B%E7%A2%91/"/>
    
  </entry>
  
</feed>
